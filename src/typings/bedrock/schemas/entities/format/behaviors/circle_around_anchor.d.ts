/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * How important this behavior is. Lower priority behaviors will be executed first.
 */
export type Priority = number;
/**
 * Movement speed multiplier of the mob when using this AI Goal.
 */
export type SpeedMultiplier = number;
/**
 * Horizontal distance from the anchor point this entity must stay within upon a successful radius adjustment.
 */
export type RadiusRange =
  | number
  | []
  | [A]
  | [A, B]
  | {
      range_min?: RangeMin;
      range_max?: RangeMax;
    };
/**
 * The first value of the range.
 */
export type A = number;
/**
 * The second value of the range.
 */
export type B = number;
/**
 * The minimum value of the range.
 */
export type RangeMin = number;
/**
 * The maximum value of the range.
 */
export type RangeMax = number;
/**
 * A random value to determine when to increase the size of the radius up to the maximum. This has a 1/value chance every tick to do so.
 */
export type RadiusChangeChance = number;
/**
 * The number of blocks above the target that the next anchor point can be set. This value is used only when the entity is tracking a target.
 */
export type HeightAboveTargetRange =
  | number
  | []
  | [A]
  | [A, B]
  | {
      range_min?: RangeMin;
      range_max?: RangeMax;
    };
/**
 * The range of height in blocks offset the mob can have from it's anchor point.
 */
export type HeightOffsetRange =
  | number
  | []
  | [A]
  | [A, B]
  | {
      range_min?: RangeMin;
      range_max?: RangeMax;
    };
/**
 * A random value to determine when to change the height of the mob from the anchor point. This has a 1/value chance every tick to do so.
 */
export type HeightChangeChance = number;
/**
 * Maximum distance from the anchor-point in which this entity considers itself to have reached the anchor point. This is to prevent the entity from bouncing back and forth trying to reach a specific spot.
 */
export type GoalRadius = number;
/**
 * The number of blocks to increase the current movement radius by, upon successful `radius_adjustment_chance`. If the current radius increases over the range maximum, the current radius will be set back to the range minimum and the entity will change between clockwise and counter-clockwise movement.
 */
export type RadiusChange = number;
/**
 * Percent chance to determine how often to increase the size of the current movement radius around the anchor point. 1 = 100%. `radius_change_chance` is deprecated and has been replaced with `radius_adjustment_chance`.
 */
export type RadiusAdjustmentChance = number;
/**
 * Percent chance to determine how often to increase or decrease the current height around the anchor point. 1 = 100%. `height_change_chance` is deprecated and has been replaced with `height_adjustment_chance`.
 */
export type HeightAdjustmentChance = number;
/**
 * Number of degrees to change this entity's facing by, when the entity selects its next anchor point.
 */
export type AngleChange = number;

/**
 * Causes an entity to circle around an anchor point placed near a point or target.
 */
export interface CircleAroundAnchor {
  priority?: Priority;
  speed_multiplier?: SpeedMultiplier;
  radius_range?: RadiusRange;
  radius_change_chance?: RadiusChangeChance;
  height_above_target_range?: HeightAboveTargetRange;
  height_offset_range?: HeightOffsetRange;
  height_change_chance?: HeightChangeChance;
  goal_radius?: GoalRadius;
  radius_change?: RadiusChange;
  radius_adjustment_chance?: RadiusAdjustmentChance;
  height_adjustment_chance?: HeightAdjustmentChance;
  angle_change?: AngleChange;
}
