/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * How important this behavior is. Lower priority behaviors will be executed first.
 */
export type Priority = number;
/**
 * Movement speed multiplier of the mob when using this AI Goal.
 */
export type SpeedMultiplier = number;
/**
 * The maximum amount of time in seconds that the goal can take before searching for the first harvest block. The time is chosen between 0 and this number.
 */
export type MaximumSecondsBeforeSearch = number;
/**
 * The maximum amount of time in seconds that the goal can take before searching again, after failing to find a a harvest block already. The time is chosen between 0 and this number.
 */
export type SearchCooldownMaximumSeconds = number;
/**
 * The number of randomly selected blocks each tick that the entity will check within its search range and height for a valid block to move to. A value of 0 will have the mob check every block within range in one tick.
 */
export type SearchCount = number;
/**
 * The height in blocks the entity will search within to find a valid target position.
 */
export type SearchHeight = number;
/**
 * The distance in blocks the entity will search within to find a valid target position.
 */
export type SearchRange = number;
/**
 * The amount of time in seconds that the goal will cooldown after a successful reap/sow, before it can start again.
 */
export type SecondsUntilNewTask = number;

/**
 * Allows the entity to search within an area for farmland with air above it. If found, the entity will replace the air block by planting a seed item from its inventory on the farmland block. This goal requires "minecraft:inventory" and "minecraft:navigation" to execute. This goal will not execute if the entity does not have an item in its inventory.
 */
export interface HarvestFarmBlock {
  priority?: Priority;
  speed_multiplier?: SpeedMultiplier;
  max_seconds_before_search?: MaximumSecondsBeforeSearch;
  search_cooldown_max_seconds?: SearchCooldownMaximumSeconds;
  search_count?: SearchCount;
  search_height?: SearchHeight;
  search_range?: SearchRange;
  seconds_until_new_task?: SecondsUntilNewTask;
}
