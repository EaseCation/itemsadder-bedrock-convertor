/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * How important this behavior is. Lower priority behaviors will be executed first.
 */
export type Priority = number;
/**
 * Movement speed multiplier of the mob when using this AI Goal.
 */
export type SpeedMultiplier = number;
/**
 * Alternative to "attack_interval_min" & "attack_interval_max". Consistent reload-time (in seconds), when not using a charged shot. Does not scale with target-distance.
 */
export type AttackInterval = number;
/**
 * Maximum bound for reload-time range (in seconds), when not using a charged shot. Reload-time range scales with target-distance.
 */
export type AttackIntervalMax = number;
/**
 * Minimum bound for reload-time range (in seconds), when not using a charged shot. Reload-time range scales with target-distance.
 */
export type AttackIntervalMin = number;
/**
 * Minimum distance to target before this entity will attempt to shoot.
 */
export type AttackRadius = number;
/**
 * Minimum distance the target can be for this mob to fire. If the target is closer, this mob will move first before firing
 */
export type AttackRadiusMin = number;
/**
 * Time (in seconds) between each individual shot when firing a burst of shots from a charged up attack.
 */
export type BurstInterval = number;
/**
 * Number of shots fired every time the attacking entity uses a charged up attack.
 */
export type BurstShots = number;
/**
 * Time (in seconds, then add "charge_shoot_trigger"), before a charged up attack is done charging. Charge-time decays while target is not in sight.
 */
export type ChargeChargedTrigger = number;
/**
 * Amount of time (in seconds, then doubled) a charged shot must be charging before reloading burst shots. Charge-time decays while target is not in sight.
 */
export type ChargeShootTrigger = number;
/**
 * Field of view (in degrees) when using sensing to detect a target for attack.
 */
export type RangedFov = number;
/**
 * Allows the actor to be set to persist upon targeting a player.
 */
export type SetPersistent = boolean;
/**
 * If a swing animation (using variable.attack_time) exists, this causes the actor to swing their arm(s) upon firing the ranged attack.
 */
export type Swing = boolean;
/**
 * Minimum amount of time (in seconds) the attacking entity needs to see the target before moving toward it.
 */
export type TargetInSightTime = number;
/**
 * Maximum rotation (in degrees), on the X-axis, this entity can rotate while trying to look at the target.
 */
export type XMaxRotation = number;
/**
 * Maximum rotation (in degrees), on the Y-axis, this entity can rotate its head while trying to look at the target.
 */
export type YMaxHeadRotation = number;

/**
 * Allows the mob to use ranged attacks like shooting arrows.
 */
export interface RangedAttack {
  priority?: Priority;
  speed_multiplier?: SpeedMultiplier;
  attack_interval?: AttackInterval;
  attack_interval_max?: AttackIntervalMax;
  attack_interval_min?: AttackIntervalMin;
  attack_radius?: AttackRadius;
  attack_radius_min?: AttackRadiusMin;
  burst_interval?: BurstInterval;
  burst_shots?: BurstShots;
  charge_charged_trigger?: ChargeChargedTrigger;
  charge_shoot_trigger?: ChargeShootTrigger;
  ranged_fov?: RangedFov;
  set_persistent?: SetPersistent;
  swing?: Swing;
  target_in_sight_time?: TargetInSightTime;
  x_max_rotation?: XMaxRotation;
  y_max_head_rotation?: YMaxHeadRotation;
}
