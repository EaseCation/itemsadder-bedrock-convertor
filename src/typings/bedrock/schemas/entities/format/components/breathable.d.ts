/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Time in seconds the entity can hold its breath.
 */
export type TotalSupply = number;
/**
 * Time in seconds between suffocation damage.
 */
export type SuffocateTime = number;
/**
 * Time in seconds to recover breath to maximum.
 */
export type InhaleTime = number;
/**
 * If true, this entity can breathe in air.
 */
export type BreathesAir = boolean;
/**
 * If true, this entity can breathe in water.
 */
export type BreathesWater = boolean;
/**
 * If true, this entity can breathe in lava.
 */
export type BreathesLava = boolean;
/**
 * If true, this entity can breathe in solid blocks.
 */
export type BreathesSolids = boolean;
/**
 * If true, this entity will have visible bubbles while in water.
 */
export type GeneratesBubbles = boolean;
/**
 * A minecraft block reference.
 */
export type BlockReference = BlockIdentifier | BlockReference1;
/**
 * A minecraft block identifier.
 */
export type BlockIdentifier = string;
/**
 * A minecraft block identifier.
 */
export type BlockIdentifier1 = string;
/**
 * The key of property is the name of the block state/property, the value must be the same as the block properties accepted values.
 */
export type StateValue = boolean | number | string;
/**
 * A condition using Molang queries that results to true/false that can be used to query for blocks with certain tags.
 */
export type Molang = string;
/**
 * List of blocks this entity can breathe in, in addition to the above.
 */
export type BreatheBlocks = BlockReference[];
/**
 * List of blocks this entity can't breathe in, in addition to the above.
 */
export type NonBreathesBlocks = BlockReference[];

/**
 * Defines what blocks this entity can breathe in and gives them the ability to suffocate.
 */
export interface Breathable {
  total_supply?: TotalSupply;
  suffocate_time?: SuffocateTime;
  inhale_time?: InhaleTime;
  breathes_air?: BreathesAir;
  breathes_water?: BreathesWater;
  breathes_lava?: BreathesLava;
  breathes_solids?: BreathesSolids;
  generates_bubbles?: GeneratesBubbles;
  breathe_blocks?: BreatheBlocks;
  non_breathe_blocks?: NonBreathesBlocks;
}
export interface BlockReference1 {
  name?: BlockIdentifier1;
  states?: States;
  tags?: Molang;
}
export interface States {
  [k: string]: StateValue;
}
