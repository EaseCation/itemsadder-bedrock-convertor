/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Base buoyancy used to calculate how much will a mob float.
 */
export type BaseBuoyancy = number;
/**
 * Applies gravity each tick. Causes more of a wave simulation, but will cause more gravity to be applied outside liquids.
 */
export type ApplyGravity = boolean;
/**
 * Base buoyancy used to calculate how much will a mob float.
 */
export type BaseBuoyancy1 = number;
/**
 * Probability for a big wave hitting the entity. Only used if `simulate_waves` is true.
 */
export type BigWaveProbability = number;
/**
 * Multiplier for the speed to make a big wave. Triggered depending on `big_wave_probability`.
 */
export type BigWaveSpeed = number;
/**
 * How much an actor will be dragged down when the Buoyancy Component is removed.
 */
export type DragDownOnBuoyancyRemoved = number;
/**
 * A minecraft block reference.
 */
export type Block = BlockIdentifier | BlockReference;
/**
 * A minecraft block identifier.
 */
export type BlockIdentifier = string;
/**
 * A minecraft block identifier.
 */
export type BlockIdentifier1 = string;
/**
 * The key of property is the name of the block state/property, the value must be the same as the block properties accepted values.
 */
export type StateValue = boolean | number | string;
/**
 * A condition using Molang queries that results to true/false that can be used to query for blocks with certain tags.
 */
export type Molang = string;
/**
 * List of blocks this entity can float on. Must be a liquid block.
 */
export type LiquidBlocks = Block[];
/**
 * Should the movement simulate waves going through.
 */
export type SimulateWaves = boolean;

/**
 * Enables an entity to float on the specified liquid blocks.
 */
export interface Buoyant {
  base_buoyancy?: BaseBuoyancy;
  apply_gravity?: ApplyGravity;
  buoyancy?: BaseBuoyancy1;
  big_wave_probability?: BigWaveProbability;
  big_wave_speed?: BigWaveSpeed;
  drag_down_on_buoyancy_removed?: DragDownOnBuoyancyRemoved;
  liquid_blocks?: LiquidBlocks;
  simulate_waves?: SimulateWaves;
}
export interface BlockReference {
  name?: BlockIdentifier1;
  states?: States;
  tags?: Molang;
}
export interface States {
  [k: string]: StateValue;
}
