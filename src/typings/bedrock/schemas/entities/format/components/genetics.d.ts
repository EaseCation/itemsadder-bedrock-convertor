/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Chance that an allele will be replaced with a random one instead of the parent's allele during birth.
 */
export type MutationRate = number;
/**
 * The range of positive integer allele values for this gene. Spawned mobs will have a random number in this range assigned to them.
 */
export type AlleleRange =
  | number
  | {
      range_min?: RangeMinimum;
      range_max?: RangeMaximum;
      [k: string]: unknown;
    };
/**
 * Lower bound of the vaues.
 */
export type RangeMinimum = number;
/**
 * Upper bound of the vaues.
 */
export type RangeMaximum = number;
/**
 * The event to fire.
 */
export type Event = string;
/**
 * The target of the event.
 */
export type Target = "baby" | "block" | "damager" | "other" | "parent" | "player" | "self" | "target";
/**
 * If this value is non-negative, compare both the mob's main and hidden alleles with this value for a match with both. Can also be a range of integers.
 */
export type BothAllele =
  | number
  | {
      range_min?: RangeMinimum;
      range_max?: RangeMaximum;
      [k: string]: unknown;
    };
/**
 * If this value is non-negative, compare both the mob's main and hidden alleles with this value for a match with either. Can also be a range of integers.
 */
export type EitherAllele = number;
/**
 * If this value is non-negative, compare the mob's hidden allele with this value for a match. Can also be a range of integers.
 */
export type HiddenAllele = number;
/**
 * If this value is non-negative, compare the mob's main allele with this value for a match. Can also be a range of integers.
 */
export type MainAllele =
  | number
  | {
      range_min?: RangeMinimum;
      range_max?: RangeMaximum;
      [k: string]: unknown;
    };
/**
 * If this value is non-negative, overrides the chance for this gene that an allele will be replaced with a random one instead of the parent's allele during birth. Non-negative values greater than 1 will be the same as the value 1.
 */
export type MutationRate1 = number;
/**
 * The list of genetic variants for this gene. These check for particular allele combinations and fire events when all of them are satisfied.
 */
export type GeneticVariants = GeneticVariants1[];
/**
 * The name of the gene.
 */
export type Name = string;
/**
 * The list of genes that this entity has and will cross with a partner during breeding.
 */
export type Genes = Gene[];

/**
 * Defines the way a mob's genes and alleles are passed on to it's offspring, and how those traits manifest in the child. Compatible parent genes are crossed together, the alleles are handed down from the parents to the child, and any matching genetic variants fire off JSON events to modify the child and express the traits.
 */
export interface Genetics {
  mutation_rate?: MutationRate;
  genes?: Genes;
}
/**
 * The list of genes that this entity has and will cross with a partner during breeding.
 */
export interface Gene {
  allele_range?: AlleleRange;
  genetic_variants?: GeneticVariants;
  name?: Name;
  [k: string]: unknown;
}
/**
 * The genetic variant for this gene. These check for particular allele combinations and fire events when all of them are satisfied.
 */
export interface GeneticVariants1 {
  birth_event?: BrithEvent;
  both_allele?: BothAllele;
  either_allele?: EitherAllele;
  hidden_allele?: HiddenAllele;
  main_allele?: MainAllele;
  mutation_rate?: MutationRate1;
  [k: string]: unknown;
}
/**
 * Event to run when this mob is created and matches the above allele conditions.
 */
export interface BrithEvent {
  event?: Event;
  target?: Target;
}
