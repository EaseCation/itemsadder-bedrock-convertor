/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Tells the pathfinder to avoid blocks that cause damage when finding a path.
 */
export type AvoidDamageBlocks = boolean;
/**
 * Tells the pathfinder to avoid portals (like nether portals) when finding a path.
 */
export type AvoidPortals = boolean;
/**
 * Whether or not the pathfinder should avoid tiles that are exposed to the sun when creating paths.
 */
export type AvoidSun = boolean;
/**
 * Tells the pathfinder to avoid water when creating a path.
 */
export type AvoidWater = boolean;
/**
 * Tells the pathfinder which blocks to avoid when creating a path.
 */
export type Block = BlockIdentifier | BlockReference;
/**
 * A minecraft block identifier.
 */
export type BlockIdentifier = string;
/**
 * A minecraft block identifier.
 */
export type BlockIdentifier1 = string;
/**
 * The key of property is the name of the block state/property, the value must be the same as the block properties accepted values.
 */
export type StateValue = boolean | number | string;
/**
 * A condition using Molang queries that results to true/false that can be used to query for blocks with certain tags.
 */
export type Molang = string;
/**
 * Tells the pathfinder which blocks to avoid when creating a path.
 */
export type BlocksToAvoid = Block[];
/**
 * Tells the pathfinder whether or not it can jump out of water (like a dolphin).
 */
export type CanBreach = boolean;
/**
 * Tells the pathfinder that it can path through a closed door and break it.
 */
export type CanBreakDoors = boolean;
/**
 * Tells the pathfinder whether or not it can jump up blocks.
 */
export type CanJump = boolean;
/**
 * Tells the pathfinder that it can path through a closed door assuming the AI will open the door.
 */
export type CanOpenDoors = boolean;
/**
 * Tells the pathfinder that it can path through a closed iron door assuming the AI will open the door.
 */
export type CanOpenIronDoors = boolean;
/**
 * Whether a path can be created through a door.
 */
export type CanPassDoors = boolean;
/**
 * Tells the pathfinder that it can start pathing when in the air.
 */
export type CanPathFromAir = boolean;
/**
 * Tells the pathfinder whether or not it can travel on the surface of the lava.
 */
export type CanPathOverLava = boolean;
/**
 * Tells the pathfinder whether or not it can travel on the surface of the water.
 */
export type CanPathOverWater = boolean;
/**
 * Tells the pathfinder whether or not it will be pulled down by gravity while in water.
 */
export type CanSink = boolean;
/**
 * Tells the pathfinder whether or not it can path anywhere through water and plays swimming animation along that path.
 */
export type CanSwim = boolean;
/**
 * Tells the pathfinder whether or not it can walk on the ground outside water.
 */
export type CanWalk = boolean;
/**
 * Tells the pathfinder whether or not it can travel in lava like walking on ground.
 */
export type CanWalkInLava = boolean;
/**
 * Tells the pathfinder whether or not it can walk on the ground underwater.
 */
export type IsAmphibious = boolean;

/**
 * Allows this entity to generate paths by flying around the air like the regular Ghast.
 */
export interface NavigationFloat {
  avoid_damage_blocks?: AvoidDamageBlocks;
  avoid_portals?: AvoidPortals;
  avoid_sun?: AvoidSun;
  avoid_water?: AvoidWater;
  blocks_to_avoid?: BlocksToAvoid;
  can_breach?: CanBreach;
  can_break_doors?: CanBreakDoors;
  can_jump?: CanJump;
  can_open_doors?: CanOpenDoors;
  can_open_iron_doors?: CanOpenIronDoors;
  can_pass_doors?: CanPassDoors;
  can_path_from_air?: CanPathFromAir;
  can_path_over_lava?: CanPathOverLava;
  can_path_over_water?: CanPathOverWater;
  can_sink?: CanSink;
  can_swim?: CanSwim;
  can_walk?: CanWalk;
  can_walk_in_lava?: CanWalkInLava;
  is_amphibious?: IsAmphibious;
}
export interface BlockReference {
  name?: BlockIdentifier1;
  states?: States;
  tags?: Molang;
}
export interface States {
  [k: string]: StateValue;
}
