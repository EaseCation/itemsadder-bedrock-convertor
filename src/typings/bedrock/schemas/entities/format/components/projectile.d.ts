/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Allows you to choose an anchor point for where the projectile is fired from. 0 = Original point, 1 = EyeHeight, and 2 = Middle or body height.
 */
export type Anchor = number;
/**
 * Alters the angle at which a projectile is vertically shot. Many splash potions in the game use this to offset their angles by -20 degrees.
 */
export type AngleOffset = number;
/**
 * If true, the entity hit will be set on fire.
 */
export type CatchFire = boolean;
/**
 * If true, when a projectile deals damage, whether or not to spawn in the critical damage particles.
 */
export type CritParticleOnHurt = boolean;
/**
 * When this projectile deals damage, whether or not to immediately destroy this projectile.
 */
export type DestroyOnHurt = boolean;
/**
 * Entity Definitions defined here can't be hurt by the projectile.
 */
export type Filter = string;
/**
 * If true, whether the projectile causes fire is affected by the mob griefing game rule.
 */
export type FireAffectedByGriefing = boolean;
/**
 * The gravity applied to this entity when thrown. When this actor is not on the ground, subtracts this amount from the actors change in vertical position every tick. The higher the value, the faster the entity falls.
 */
export type Gravity = number;
/**
 * The sound that plays when the projectile hits the ground.
 */
export type HitGroundSound =
  | "add.chest"
  | "admire"
  | "agitated"
  | "ambient.aggressive"
  | "ambient.baby"
  | "ambient.basalt_deltas.additions"
  | "ambient.basalt_deltas.loop"
  | "ambient.candle"
  | "ambient.cave"
  | "ambient.crimson_forest.additions"
  | "ambient.crimson_forest.loop"
  | "ambient.crimson_forest.mood"
  | "ambient.in.raid"
  | "ambient.in.water"
  | "ambient.nether_wastes.additions"
  | "ambient.nether_wastes.loop"
  | "ambient.nether_wastes.mood"
  | "ambient.pollinate"
  | "ambient.screamer"
  | "ambient.soulsand_valley.additions"
  | "ambient.soulsand_valley.loop"
  | "ambient.soulsand_valley.mood"
  | "ambient.tame"
  | "ambient.warped_forest.additions"
  | "ambient.warped_forest.loop"
  | "ambient.warped_forest.mood"
  | "ambient.worried"
  | "ambient"
  | "angry"
  | "armor.equip_chain"
  | "armor.equip_diamond"
  | "armor.equip_elytra"
  | "armor.equip_generic"
  | "armor.equip_gold"
  | "armor.equip_iron"
  | "armor.equip_leather"
  | "armor.equip_netherite"
  | "armor"
  | "attach"
  | "attack.nodamage"
  | "attack.strong"
  | "attack"
  | "balloonpop"
  | "beacon.activate"
  | "beacon.ambient"
  | "beacon.deactivate"
  | "beacon.power"
  | "blast"
  | "block.bamboo_sapling.place"
  | "block.barrel.close"
  | "block.barrel.open"
  | "block.beehive.drip"
  | "block.beehive.enter"
  | "block.beehive.exit"
  | "block.beehive.shear"
  | "block.beehive.work"
  | "block.bell.hit"
  | "block.blastfurnace.fire_crackle"
  | "block.campfire.crackle"
  | "block.cartography_table.use"
  | "block.click.fail"
  | "block.click"
  | "block.composter.empty"
  | "block.composter.fill_success"
  | "block.composter.fill"
  | "block.composter.ready"
  | "block.enchanting_table.use"
  | "block.end_portal_frame.fill"
  | "block.end_portal.spawn"
  | "block.fletching_table.use"
  | "block.frog_spawn.break"
  | "block.frog_spawn.hatch"
  | "block.furnace.lit"
  | "block.grindstone.use"
  | "block.loom.use"
  | "block.scaffolding.climb"
  | "block.sculk_catalyst.bloom"
  | "block.sculk_sensor.place"
  | "block.sculk_shrieker.place"
  | "block.sculk_shrieker.shriek"
  | "block.sculk.spread"
  | "block.smithing_table.use"
  | "block.smoker.smoke"
  | "block.stonecutter.use"
  | "block.sweet_berry_bush.hurt"
  | "block.sweet_berry_bush.pick"
  | "block.turtle_egg.attack"
  | "block.turtle_egg.break"
  | "block.turtle_egg.crack"
  | "block.turtle_egg.hatch"
  | "boost"
  | "born"
  | "bottle.dragonbreath"
  | "bow.hit"
  | "bow"
  | "break.block"
  | "break"
  | "breathe"
  | "bubble.down"
  | "bubble.downinside"
  | "bubble.pop"
  | "bubble.up"
  | "bubble.upinside"
  | "bucket.empty.fish"
  | "bucket.empty.lava"
  | "bucket.empty.powder_snow"
  | "bucket.empty.water"
  | "bucket.fill.fish"
  | "bucket.fill.lava"
  | "bucket.fill.powder_snow"
  | "bucket.fill.water"
  | "bullet.hit"
  | "burp"
  | "cake.add_candle"
  | "camera.take_picture"
  | "cant_breed"
  | "cast.spell"
  | "cauldron_drip.lava.pointed_dripstone"
  | "cauldron_drip.water.pointed_dripstone"
  | "celebrate"
  | "charge.sculk"
  | "charge"
  | "chest.closed"
  | "chest.open"
  | "chime.amethyst_block"
  | "chorusdeath"
  | "chorusgrow"
  | "conduit.activate"
  | "conduit.ambient"
  | "conduit.attack"
  | "conduit.deactivate"
  | "conduit.short"
  | "convert_mooshroom"
  | "convert_to_drowned"
  | "convert_to_frog"
  | "convert_to_stray"
  | "converted_to_zombified"
  | "copper.wax.off"
  | "copper.wax.on"
  | "crossbow.loading.end"
  | "crossbow.loading.middle"
  | "crossbow.loading.start"
  | "crossbow.quick_charge.end"
  | "crossbow.quick_charge.middle"
  | "crossbow.quick_charge.start"
  | "crossbow.shoot"
  | "death.baby"
  | "death.in.water"
  | "death.mid.volume"
  | "death.min.volume"
  | "death.screamer"
  | "death.to.zombie"
  | "death"
  | "default"
  | "deny"
  | "detach"
  | "disappeared"
  | "drink.honey"
  | "drink.milk"
  | "drink"
  | "drip.lava.pointed_dripstone"
  | "drip.water.pointed_dripstone"
  | "drop.slot"
  | "eat"
  | "elderguardian.curse"
  | "elemconstruct.open"
  | "enderchest.closed"
  | "enderchest.open"
  | "explode"
  | "extinguish.candle"
  | "extinguish.fire"
  | "fall.big"
  | "fall.small"
  | "fall"
  | "fang"
  | "fire"
  | "fizz"
  | "flap"
  | "flop"
  | "fly"
  | "fuse"
  | "gallop"
  | "glass"
  | "glow_squid.ink_squirt"
  | "glowstick.use"
  | "growl"
  | "haggle.idle"
  | "haggle.no"
  | "haggle.yes"
  | "haggle"
  | "heartbeat"
  | "heavy.step"
  | "hit"
  | "horn_break"
  | "horn_call0"
  | "horn_call1"
  | "horn_call2"
  | "horn_call3"
  | "horn_call4"
  | "horn_call5"
  | "horn_call6"
  | "horn_call7"
  | "hurt.baby"
  | "hurt.in.water"
  | "hurt.screamer"
  | "hurt"
  | "icebomb.hit"
  | "ignite"
  | "imitate.blaze"
  | "imitate.cave_spider"
  | "imitate.creeper"
  | "imitate.elder_guardian"
  | "imitate.ender_dragon"
  | "imitate.enderman"
  | "imitate.evocation_illager"
  | "imitate.ghast"
  | "imitate.husk"
  | "imitate.illusion_illager"
  | "imitate.magma_cube"
  | "imitate.polar_bear"
  | "imitate.shulker"
  | "imitate.silverfish"
  | "imitate.skeleton"
  | "imitate.slime"
  | "imitate.spider"
  | "imitate.stray"
  | "imitate.vex"
  | "imitate.vindication_illager"
  | "imitate.warden"
  | "imitate.witch"
  | "imitate.wither_skeleton"
  | "imitate.wither"
  | "imitate.wolf"
  | "imitate.zombie_pigman"
  | "imitate.zombie_villager"
  | "imitate.zombie"
  | "insert_enchanted"
  | "insert"
  | "irongolem.crack"
  | "irongolem.repair"
  | "item_given"
  | "item_taken"
  | "item_thrown"
  | "item.book.put"
  | "item.fizz"
  | "item.shield.block"
  | "item.spyglass.stop_using"
  | "item.spyglass.use"
  | "item.trident.hit_ground"
  | "item.trident.hit"
  | "item.trident.return"
  | "item.trident.riptide_1"
  | "item.trident.riptide_2"
  | "item.trident.riptide_3"
  | "item.trident.throw"
  | "item.trident.thunder"
  | "item.use.on"
  | "jump_to_block"
  | "jump.prevent"
  | "jump"
  | "land"
  | "large.blast"
  | "launch"
  | "lava.pop"
  | "lava"
  | "lay_egg"
  | "lay_spawn"
  | "leashknot.break"
  | "leashknot.place"
  | "levelup"
  | "listening_angry"
  | "listening"
  | "lodestone_compass.link_compass_to_lodestone"
  | "lt.reaction.bleach"
  | "lt.reaction.epaste"
  | "lt.reaction.epaste2"
  | "lt.reaction.fertilizer"
  | "lt.reaction.fire"
  | "lt.reaction.fireball"
  | "lt.reaction.icebomb"
  | "lt.reaction.mgsalt"
  | "lt.reaction.miscexplosion"
  | "lt.reaction.miscfire"
  | "lt.reaction.miscmystical"
  | "lt.reaction.miscmystical2"
  | "lt.reaction.product"
  | "mad"
  | "milk_suspiciously"
  | "milk.screamer"
  | "milk"
  | "mob.armor_stand.place"
  | "mob.player.hurt_drown"
  | "mob.player.hurt_freeze"
  | "mob.player.hurt_on_fire"
  | "mob.warning.baby"
  | "mob.warning"
  | "nearby_close"
  | "nearby_closer"
  | "nearby_closest"
  | "note"
  | "panic"
  | "pant"
  | "particle.soul_escape.loud"
  | "particle.soul_escape.quiet"
  | "pick_berries.cave_vines"
  | "piston.in"
  | "piston.out"
  | "place"
  | "plop"
  | "pop"
  | "portal.travel"
  | "portal"
  | "potion.brewed"
  | "power.off.sculk_sensor"
  | "power.off"
  | "power.on.sculk_sensor"
  | "power.on"
  | "pre_ram.screamer"
  | "pre_ram"
  | "prepare.attack"
  | "prepare.summon"
  | "prepare.wololo"
  | "presneeze"
  | "purr"
  | "purreow"
  | "raid.horn"
  | "ram_impact.screamer"
  | "ram_impact"
  | "random.anvil_use"
  | "reappeared"
  | "record.11"
  | "record.13"
  | "record.5"
  | "record.blocks"
  | "record.cat"
  | "record.chirp"
  | "record.far"
  | "record.mall"
  | "record.mellohi"
  | "record.otherside"
  | "record.pigstep"
  | "record.stal"
  | "record.strad"
  | "record.wait"
  | "record.ward"
  | "remedy"
  | "respawn_anchor.ambient"
  | "respawn_anchor.basalt_deltas.mood"
  | "respawn_anchor.charge"
  | "respawn_anchor.deplete"
  | "respawn_anchor.set_spawn"
  | "retreat"
  | "roar"
  | "saddle"
  | "scared"
  | "scrape"
  | "screech"
  | "shake"
  | "shear"
  | "shoot"
  | "shulker.close"
  | "shulker.open"
  | "shulkerbox.closed"
  | "shulkerbox.open"
  | "sleep"
  | "smithing_table.use"
  | "sneeze"
  | "sonic_boom"
  | "sonic_charge"
  | "sparkler.active"
  | "sparkler.use"
  | "spawn"
  | "splash"
  | "squid.ink_squirt"
  | "squish.big"
  | "squish.small"
  | "stare"
  | "step_lava"
  | "step.baby"
  | "step"
  | "stun"
  | "swim"
  | "swoop"
  | "takeoff"
  | "teleport"
  | "tempt"
  | "thorns"
  | "throw"
  | "thunder"
  | "tilt_down.big_dripleaf"
  | "tilt_up.big_dripleaf"
  | "tongue"
  | "tripod"
  | "twinkle"
  | "ui.cartography_table.take_result"
  | "ui.loom.take_result"
  | "ui.stonecutter.take_result"
  | "unfect"
  | "warn"
  | "water"
  | "whine";
/**
 * The sound that plays when the projectile hits something.
 */
export type HitSound =
  | "add.chest"
  | "admire"
  | "agitated"
  | "ambient.aggressive"
  | "ambient.baby"
  | "ambient.basalt_deltas.additions"
  | "ambient.basalt_deltas.loop"
  | "ambient.candle"
  | "ambient.cave"
  | "ambient.crimson_forest.additions"
  | "ambient.crimson_forest.loop"
  | "ambient.crimson_forest.mood"
  | "ambient.in.raid"
  | "ambient.in.water"
  | "ambient.nether_wastes.additions"
  | "ambient.nether_wastes.loop"
  | "ambient.nether_wastes.mood"
  | "ambient.pollinate"
  | "ambient.screamer"
  | "ambient.soulsand_valley.additions"
  | "ambient.soulsand_valley.loop"
  | "ambient.soulsand_valley.mood"
  | "ambient.tame"
  | "ambient.warped_forest.additions"
  | "ambient.warped_forest.loop"
  | "ambient.warped_forest.mood"
  | "ambient.worried"
  | "ambient"
  | "angry"
  | "armor.equip_chain"
  | "armor.equip_diamond"
  | "armor.equip_elytra"
  | "armor.equip_generic"
  | "armor.equip_gold"
  | "armor.equip_iron"
  | "armor.equip_leather"
  | "armor.equip_netherite"
  | "armor"
  | "attach"
  | "attack.nodamage"
  | "attack.strong"
  | "attack"
  | "balloonpop"
  | "beacon.activate"
  | "beacon.ambient"
  | "beacon.deactivate"
  | "beacon.power"
  | "blast"
  | "block.bamboo_sapling.place"
  | "block.barrel.close"
  | "block.barrel.open"
  | "block.beehive.drip"
  | "block.beehive.enter"
  | "block.beehive.exit"
  | "block.beehive.shear"
  | "block.beehive.work"
  | "block.bell.hit"
  | "block.blastfurnace.fire_crackle"
  | "block.campfire.crackle"
  | "block.cartography_table.use"
  | "block.click.fail"
  | "block.click"
  | "block.composter.empty"
  | "block.composter.fill_success"
  | "block.composter.fill"
  | "block.composter.ready"
  | "block.enchanting_table.use"
  | "block.end_portal_frame.fill"
  | "block.end_portal.spawn"
  | "block.fletching_table.use"
  | "block.frog_spawn.break"
  | "block.frog_spawn.hatch"
  | "block.furnace.lit"
  | "block.grindstone.use"
  | "block.loom.use"
  | "block.scaffolding.climb"
  | "block.sculk_catalyst.bloom"
  | "block.sculk_sensor.place"
  | "block.sculk_shrieker.place"
  | "block.sculk_shrieker.shriek"
  | "block.sculk.spread"
  | "block.smithing_table.use"
  | "block.smoker.smoke"
  | "block.stonecutter.use"
  | "block.sweet_berry_bush.hurt"
  | "block.sweet_berry_bush.pick"
  | "block.turtle_egg.attack"
  | "block.turtle_egg.break"
  | "block.turtle_egg.crack"
  | "block.turtle_egg.hatch"
  | "boost"
  | "born"
  | "bottle.dragonbreath"
  | "bow.hit"
  | "bow"
  | "break.block"
  | "break"
  | "breathe"
  | "bubble.down"
  | "bubble.downinside"
  | "bubble.pop"
  | "bubble.up"
  | "bubble.upinside"
  | "bucket.empty.fish"
  | "bucket.empty.lava"
  | "bucket.empty.powder_snow"
  | "bucket.empty.water"
  | "bucket.fill.fish"
  | "bucket.fill.lava"
  | "bucket.fill.powder_snow"
  | "bucket.fill.water"
  | "bullet.hit"
  | "burp"
  | "cake.add_candle"
  | "camera.take_picture"
  | "cant_breed"
  | "cast.spell"
  | "cauldron_drip.lava.pointed_dripstone"
  | "cauldron_drip.water.pointed_dripstone"
  | "celebrate"
  | "charge.sculk"
  | "charge"
  | "chest.closed"
  | "chest.open"
  | "chime.amethyst_block"
  | "chorusdeath"
  | "chorusgrow"
  | "conduit.activate"
  | "conduit.ambient"
  | "conduit.attack"
  | "conduit.deactivate"
  | "conduit.short"
  | "convert_mooshroom"
  | "convert_to_drowned"
  | "convert_to_frog"
  | "convert_to_stray"
  | "converted_to_zombified"
  | "copper.wax.off"
  | "copper.wax.on"
  | "crossbow.loading.end"
  | "crossbow.loading.middle"
  | "crossbow.loading.start"
  | "crossbow.quick_charge.end"
  | "crossbow.quick_charge.middle"
  | "crossbow.quick_charge.start"
  | "crossbow.shoot"
  | "death.baby"
  | "death.in.water"
  | "death.mid.volume"
  | "death.min.volume"
  | "death.screamer"
  | "death.to.zombie"
  | "death"
  | "default"
  | "deny"
  | "detach"
  | "disappeared"
  | "drink.honey"
  | "drink.milk"
  | "drink"
  | "drip.lava.pointed_dripstone"
  | "drip.water.pointed_dripstone"
  | "drop.slot"
  | "eat"
  | "elderguardian.curse"
  | "elemconstruct.open"
  | "enderchest.closed"
  | "enderchest.open"
  | "explode"
  | "extinguish.candle"
  | "extinguish.fire"
  | "fall.big"
  | "fall.small"
  | "fall"
  | "fang"
  | "fire"
  | "fizz"
  | "flap"
  | "flop"
  | "fly"
  | "fuse"
  | "gallop"
  | "glass"
  | "glow_squid.ink_squirt"
  | "glowstick.use"
  | "growl"
  | "haggle.idle"
  | "haggle.no"
  | "haggle.yes"
  | "haggle"
  | "heartbeat"
  | "heavy.step"
  | "hit"
  | "horn_break"
  | "horn_call0"
  | "horn_call1"
  | "horn_call2"
  | "horn_call3"
  | "horn_call4"
  | "horn_call5"
  | "horn_call6"
  | "horn_call7"
  | "hurt.baby"
  | "hurt.in.water"
  | "hurt.screamer"
  | "hurt"
  | "icebomb.hit"
  | "ignite"
  | "imitate.blaze"
  | "imitate.cave_spider"
  | "imitate.creeper"
  | "imitate.elder_guardian"
  | "imitate.ender_dragon"
  | "imitate.enderman"
  | "imitate.evocation_illager"
  | "imitate.ghast"
  | "imitate.husk"
  | "imitate.illusion_illager"
  | "imitate.magma_cube"
  | "imitate.polar_bear"
  | "imitate.shulker"
  | "imitate.silverfish"
  | "imitate.skeleton"
  | "imitate.slime"
  | "imitate.spider"
  | "imitate.stray"
  | "imitate.vex"
  | "imitate.vindication_illager"
  | "imitate.warden"
  | "imitate.witch"
  | "imitate.wither_skeleton"
  | "imitate.wither"
  | "imitate.wolf"
  | "imitate.zombie_pigman"
  | "imitate.zombie_villager"
  | "imitate.zombie"
  | "insert_enchanted"
  | "insert"
  | "irongolem.crack"
  | "irongolem.repair"
  | "item_given"
  | "item_taken"
  | "item_thrown"
  | "item.book.put"
  | "item.fizz"
  | "item.shield.block"
  | "item.spyglass.stop_using"
  | "item.spyglass.use"
  | "item.trident.hit_ground"
  | "item.trident.hit"
  | "item.trident.return"
  | "item.trident.riptide_1"
  | "item.trident.riptide_2"
  | "item.trident.riptide_3"
  | "item.trident.throw"
  | "item.trident.thunder"
  | "item.use.on"
  | "jump_to_block"
  | "jump.prevent"
  | "jump"
  | "land"
  | "large.blast"
  | "launch"
  | "lava.pop"
  | "lava"
  | "lay_egg"
  | "lay_spawn"
  | "leashknot.break"
  | "leashknot.place"
  | "levelup"
  | "listening_angry"
  | "listening"
  | "lodestone_compass.link_compass_to_lodestone"
  | "lt.reaction.bleach"
  | "lt.reaction.epaste"
  | "lt.reaction.epaste2"
  | "lt.reaction.fertilizer"
  | "lt.reaction.fire"
  | "lt.reaction.fireball"
  | "lt.reaction.icebomb"
  | "lt.reaction.mgsalt"
  | "lt.reaction.miscexplosion"
  | "lt.reaction.miscfire"
  | "lt.reaction.miscmystical"
  | "lt.reaction.miscmystical2"
  | "lt.reaction.product"
  | "mad"
  | "milk_suspiciously"
  | "milk.screamer"
  | "milk"
  | "mob.armor_stand.place"
  | "mob.player.hurt_drown"
  | "mob.player.hurt_freeze"
  | "mob.player.hurt_on_fire"
  | "mob.warning.baby"
  | "mob.warning"
  | "nearby_close"
  | "nearby_closer"
  | "nearby_closest"
  | "note"
  | "panic"
  | "pant"
  | "particle.soul_escape.loud"
  | "particle.soul_escape.quiet"
  | "pick_berries.cave_vines"
  | "piston.in"
  | "piston.out"
  | "place"
  | "plop"
  | "pop"
  | "portal.travel"
  | "portal"
  | "potion.brewed"
  | "power.off.sculk_sensor"
  | "power.off"
  | "power.on.sculk_sensor"
  | "power.on"
  | "pre_ram.screamer"
  | "pre_ram"
  | "prepare.attack"
  | "prepare.summon"
  | "prepare.wololo"
  | "presneeze"
  | "purr"
  | "purreow"
  | "raid.horn"
  | "ram_impact.screamer"
  | "ram_impact"
  | "random.anvil_use"
  | "reappeared"
  | "record.11"
  | "record.13"
  | "record.5"
  | "record.blocks"
  | "record.cat"
  | "record.chirp"
  | "record.far"
  | "record.mall"
  | "record.mellohi"
  | "record.otherside"
  | "record.pigstep"
  | "record.stal"
  | "record.strad"
  | "record.wait"
  | "record.ward"
  | "remedy"
  | "respawn_anchor.ambient"
  | "respawn_anchor.basalt_deltas.mood"
  | "respawn_anchor.charge"
  | "respawn_anchor.deplete"
  | "respawn_anchor.set_spawn"
  | "retreat"
  | "roar"
  | "saddle"
  | "scared"
  | "scrape"
  | "screech"
  | "shake"
  | "shear"
  | "shoot"
  | "shulker.close"
  | "shulker.open"
  | "shulkerbox.closed"
  | "shulkerbox.open"
  | "sleep"
  | "smithing_table.use"
  | "sneeze"
  | "sonic_boom"
  | "sonic_charge"
  | "sparkler.active"
  | "sparkler.use"
  | "spawn"
  | "splash"
  | "squid.ink_squirt"
  | "squish.big"
  | "squish.small"
  | "stare"
  | "step_lava"
  | "step.baby"
  | "step"
  | "stun"
  | "swim"
  | "swoop"
  | "takeoff"
  | "teleport"
  | "tempt"
  | "thorns"
  | "throw"
  | "thunder"
  | "tilt_down.big_dripleaf"
  | "tilt_up.big_dripleaf"
  | "tongue"
  | "tripod"
  | "twinkle"
  | "ui.cartography_table.take_result"
  | "ui.loom.take_result"
  | "ui.stonecutter.take_result"
  | "unfect"
  | "warn"
  | "water"
  | "whine";
/**
 * If true, the projectile homes in to the nearest entity.
 */
export type Homing = boolean;
/**
 * The fraction of the projectile's speed maintained every frame while traveling in air.
 */
export type Inertia = number;
/**
 * If true, the projectile will be treated as dangerous to the players.
 */
export type IsDangerous = boolean;
/**
 * If true, the projectile will knock back the entity it hits.
 */
export type Knockback = boolean;
/**
 * If true, the entity hit will be struck by lightning.
 */
export type Lightning = boolean;
/**
 * The fraction of the projectile's speed maintained every frame while traveling in water.
 */
export type LiquidInertia = number;
/**
 * If true, the projectile can hit multiple entities per flight.
 */
export type MultipleTargets = boolean;
/**
 * The offset from the entity's anchor where the projectile will spawn.
 */
export type Offset = [] | [X] | [X, Y] | [X, Y, Z];
/**
 * The X component.
 */
export type X = number;
/**
 * The Y component.
 */
export type Y = number;
/**
 * The Z component.
 */
export type Z = number;
/**
 * Time in seconds that the entity hit will be on fire for.
 */
export type OnFireTime = number;
/**
 * If true, the effect will be applied to blocking targets.
 */
export type ApplyEffectToBlockingTargets = boolean;
/**
 * Determines if the struck object is set on fire.
 */
export type CatchFire1 = boolean;
/**
 * The projectile that will be affected by this event.
 */
export type AffectProjectile = boolean;
/**
 * The shooter that will be affected by this event.
 */
export type AffectShooter = boolean;
/**
 * All entities in the splash area will be affected by this event.
 */
export type AffectSplashArea = boolean;
/**
 * The target will be affected by this event.
 */
export type AffectTarget = boolean;
/**
 * The event triggered. Also has an option filters parameter to limit affected targets.
 */
export type EventTrigger =
  | string
  | {
      event?: Event;
      target?: Target;
      [k: string]: unknown;
    };
/**
 * The event to fire.
 */
export type Event = string;
/**
 * The target of the event.
 */
export type Target = "baby" | "block" | "damager" | "other" | "parent" | "player" | "self" | "target";
/**
 * The splash area that will be affected.
 */
export type SplashArea = number;
/**
 * If the target is on fire, then douse hte fire.
 */
export type DouseFire = boolean;
/**
 * The shape of the area that is frozen.
 */
export type Shape = "sphere" | "cube";
/**
 * If true, the area will snap to the nearest block.
 */
export type SnapToBlock = boolean;
/**
 * The size of the area that is frozen.
 */
export type Size = number;
/**
 * The minimum XP granted.
 */
export type MinXP = number;
/**
 * The maximum XP granted.
 */
export type MaxXP = number;
/**
 * The amount of damage the owner will take.
 */
export type OwnerDamage = number;
/**
 * If true, the owner will be knocked back.
 */
export type Knockback1 = boolean;
/**
 * If true, the owner will be set on fire.
 */
export type Ignite = boolean;
/**
 * Determines if a fire may be started on a flammable target.
 */
export type Ignite1 = boolean;
/**
 * Determines if the struck object is set on fire.
 */
export type CatchFire2 = boolean;
/**
 * Whether lightning can be channeled through hte weapon.
 */
export type Channeling = boolean;
/**
 * The damage dealt on impact.
 */
export type Damage = number;
/**
 * Projectile is removed on hit.
 */
export type DestroyOnHit = boolean;
/**
 * If true, then the hit must cause damage to destroy the projectile.
 */
export type DestroyOnHitRequiresDamage = boolean;
/**
 * The identifier of an entity that can be hit.
 */
export type Filter1 = string;
/**
 * If true, the projectile will knock back the entity it hits.
 */
export type Knockback2 = boolean;
/**
 * Maximum critical damage.
 */
export type MaxCriticalDamage = number;
/**
 * Minimum critical damage.
 */
export type MinCriticalDamage = number;
/**
 * How much the base damage is multiplied.
 */
export type PowerMultiplier = number;
/**
 * If true, damage will be randomized based on damage and speed.
 */
export type SemiRandomDiffDamage = boolean;
/**
 * If true, then the hit must cause damage to update the last hurt property.
 */
export type SetLastHurtRequiresDamage = boolean;
/**
 * If true, a mob will spawn that is not hostile, like the bat entity in Minecraft.
 */
export type Ambient = boolean;
/**
 * The multiplier of the amplification of this effect.
 */
export type Amplifier = number;
/**
 * The effect's duration.
 */
export type Duration = number;
/**
 * The effect's duration on easy mode.
 */
export type DurationEasy = number;
/**
 * The effect's duration on hard mode.
 */
export type DurationHard = number;
/**
 * The effect's duration on normal mode.
 */
export type DurationNormal = number;
/**
 * The identifier of the mob entity to affect.
 */
export type Effect = string;
/**
 * Does the entity's look change.
 */
export type Visible = boolean;
/**
 * The amount of time a target will remain on fire.
 */
export type OnFireTime1 = number;
/**
 * The number of particles to spawn.
 */
export type NumParticles = number;
/**
 * If true, spawns particles on an entity hit.
 */
export type OnEntityHit = boolean;
/**
 * If true, spawns particles on any other hit.
 */
export type OnOtherHit = boolean;
/**
 * The id of the particle to spawn on hit.
 */
export type ParticleType = string;
/**
 * Defines the effect the arrow will apply to the entity it hits.
 */
export type PotionEffect = number;
/**
 * Potion spawns an area of effect cloud. See the table below for all spawn_aoe_cloud parameters.
 */
export type SpawnAOECloud = boolean;
/**
 * The amount of new entities spawned.
 */
export type FirstSpawnCount = number;
/**
 * The chance that a spawn occurs when a projectile hits the entity.
 */
export type FirstSpawnPercentChance = number;
/**
 * The chance that a first spawn occurs when a projectile hits the entity.
 */
export type FirstSpawnChance = number;
/**
 * The chance that a second spawn occurs when a projectile hits the entity.
 */
export type SecondSpawnChance = number;
/**
 * The amount of new entities spawned in teh second spawn.
 */
export type SecondSpawnCount = number;
/**
 * Determines if a baby spawns.
 */
export type SpawnBaby = boolean;
/**
 * The entity that will spawn.
 */
export type SpawnDefinition = string;
/**
 * Determines if the owner is transported on hit.
 */
export type TeleportOwner = boolean;
/**
 * Particle to use upon collision.
 */
export type Particle = string;
/**
 * Defines the effect the arrow will apply to the entity it hits.
 */
export type PotionEffect1 = number;
/**
 * Determines the velocity of the projectile.
 */
export type Power = number;
/**
 * If true, this entity will be reflected back when hit.
 */
export type ReflectOnHurt = boolean;
/**
 * If true, damage will be randomized based on damage and speed.
 */
export type SemiRandomDiffDamage1 = boolean;
/**
 * The sound that plays when the projectile is shot.
 */
export type ShootSound =
  | "add.chest"
  | "admire"
  | "agitated"
  | "ambient.aggressive"
  | "ambient.baby"
  | "ambient.basalt_deltas.additions"
  | "ambient.basalt_deltas.loop"
  | "ambient.candle"
  | "ambient.cave"
  | "ambient.crimson_forest.additions"
  | "ambient.crimson_forest.loop"
  | "ambient.crimson_forest.mood"
  | "ambient.in.raid"
  | "ambient.in.water"
  | "ambient.nether_wastes.additions"
  | "ambient.nether_wastes.loop"
  | "ambient.nether_wastes.mood"
  | "ambient.pollinate"
  | "ambient.screamer"
  | "ambient.soulsand_valley.additions"
  | "ambient.soulsand_valley.loop"
  | "ambient.soulsand_valley.mood"
  | "ambient.tame"
  | "ambient.warped_forest.additions"
  | "ambient.warped_forest.loop"
  | "ambient.warped_forest.mood"
  | "ambient.worried"
  | "ambient"
  | "angry"
  | "armor.equip_chain"
  | "armor.equip_diamond"
  | "armor.equip_elytra"
  | "armor.equip_generic"
  | "armor.equip_gold"
  | "armor.equip_iron"
  | "armor.equip_leather"
  | "armor.equip_netherite"
  | "armor"
  | "attach"
  | "attack.nodamage"
  | "attack.strong"
  | "attack"
  | "balloonpop"
  | "beacon.activate"
  | "beacon.ambient"
  | "beacon.deactivate"
  | "beacon.power"
  | "blast"
  | "block.bamboo_sapling.place"
  | "block.barrel.close"
  | "block.barrel.open"
  | "block.beehive.drip"
  | "block.beehive.enter"
  | "block.beehive.exit"
  | "block.beehive.shear"
  | "block.beehive.work"
  | "block.bell.hit"
  | "block.blastfurnace.fire_crackle"
  | "block.campfire.crackle"
  | "block.cartography_table.use"
  | "block.click.fail"
  | "block.click"
  | "block.composter.empty"
  | "block.composter.fill_success"
  | "block.composter.fill"
  | "block.composter.ready"
  | "block.enchanting_table.use"
  | "block.end_portal_frame.fill"
  | "block.end_portal.spawn"
  | "block.fletching_table.use"
  | "block.frog_spawn.break"
  | "block.frog_spawn.hatch"
  | "block.furnace.lit"
  | "block.grindstone.use"
  | "block.loom.use"
  | "block.scaffolding.climb"
  | "block.sculk_catalyst.bloom"
  | "block.sculk_sensor.place"
  | "block.sculk_shrieker.place"
  | "block.sculk_shrieker.shriek"
  | "block.sculk.spread"
  | "block.smithing_table.use"
  | "block.smoker.smoke"
  | "block.stonecutter.use"
  | "block.sweet_berry_bush.hurt"
  | "block.sweet_berry_bush.pick"
  | "block.turtle_egg.attack"
  | "block.turtle_egg.break"
  | "block.turtle_egg.crack"
  | "block.turtle_egg.hatch"
  | "boost"
  | "born"
  | "bottle.dragonbreath"
  | "bow.hit"
  | "bow"
  | "break.block"
  | "break"
  | "breathe"
  | "bubble.down"
  | "bubble.downinside"
  | "bubble.pop"
  | "bubble.up"
  | "bubble.upinside"
  | "bucket.empty.fish"
  | "bucket.empty.lava"
  | "bucket.empty.powder_snow"
  | "bucket.empty.water"
  | "bucket.fill.fish"
  | "bucket.fill.lava"
  | "bucket.fill.powder_snow"
  | "bucket.fill.water"
  | "bullet.hit"
  | "burp"
  | "cake.add_candle"
  | "camera.take_picture"
  | "cant_breed"
  | "cast.spell"
  | "cauldron_drip.lava.pointed_dripstone"
  | "cauldron_drip.water.pointed_dripstone"
  | "celebrate"
  | "charge.sculk"
  | "charge"
  | "chest.closed"
  | "chest.open"
  | "chime.amethyst_block"
  | "chorusdeath"
  | "chorusgrow"
  | "conduit.activate"
  | "conduit.ambient"
  | "conduit.attack"
  | "conduit.deactivate"
  | "conduit.short"
  | "convert_mooshroom"
  | "convert_to_drowned"
  | "convert_to_frog"
  | "convert_to_stray"
  | "converted_to_zombified"
  | "copper.wax.off"
  | "copper.wax.on"
  | "crossbow.loading.end"
  | "crossbow.loading.middle"
  | "crossbow.loading.start"
  | "crossbow.quick_charge.end"
  | "crossbow.quick_charge.middle"
  | "crossbow.quick_charge.start"
  | "crossbow.shoot"
  | "death.baby"
  | "death.in.water"
  | "death.mid.volume"
  | "death.min.volume"
  | "death.screamer"
  | "death.to.zombie"
  | "death"
  | "default"
  | "deny"
  | "detach"
  | "disappeared"
  | "drink.honey"
  | "drink.milk"
  | "drink"
  | "drip.lava.pointed_dripstone"
  | "drip.water.pointed_dripstone"
  | "drop.slot"
  | "eat"
  | "elderguardian.curse"
  | "elemconstruct.open"
  | "enderchest.closed"
  | "enderchest.open"
  | "explode"
  | "extinguish.candle"
  | "extinguish.fire"
  | "fall.big"
  | "fall.small"
  | "fall"
  | "fang"
  | "fire"
  | "fizz"
  | "flap"
  | "flop"
  | "fly"
  | "fuse"
  | "gallop"
  | "glass"
  | "glow_squid.ink_squirt"
  | "glowstick.use"
  | "growl"
  | "haggle.idle"
  | "haggle.no"
  | "haggle.yes"
  | "haggle"
  | "heartbeat"
  | "heavy.step"
  | "hit"
  | "horn_break"
  | "horn_call0"
  | "horn_call1"
  | "horn_call2"
  | "horn_call3"
  | "horn_call4"
  | "horn_call5"
  | "horn_call6"
  | "horn_call7"
  | "hurt.baby"
  | "hurt.in.water"
  | "hurt.screamer"
  | "hurt"
  | "icebomb.hit"
  | "ignite"
  | "imitate.blaze"
  | "imitate.cave_spider"
  | "imitate.creeper"
  | "imitate.elder_guardian"
  | "imitate.ender_dragon"
  | "imitate.enderman"
  | "imitate.evocation_illager"
  | "imitate.ghast"
  | "imitate.husk"
  | "imitate.illusion_illager"
  | "imitate.magma_cube"
  | "imitate.polar_bear"
  | "imitate.shulker"
  | "imitate.silverfish"
  | "imitate.skeleton"
  | "imitate.slime"
  | "imitate.spider"
  | "imitate.stray"
  | "imitate.vex"
  | "imitate.vindication_illager"
  | "imitate.warden"
  | "imitate.witch"
  | "imitate.wither_skeleton"
  | "imitate.wither"
  | "imitate.wolf"
  | "imitate.zombie_pigman"
  | "imitate.zombie_villager"
  | "imitate.zombie"
  | "insert_enchanted"
  | "insert"
  | "irongolem.crack"
  | "irongolem.repair"
  | "item_given"
  | "item_taken"
  | "item_thrown"
  | "item.book.put"
  | "item.fizz"
  | "item.shield.block"
  | "item.spyglass.stop_using"
  | "item.spyglass.use"
  | "item.trident.hit_ground"
  | "item.trident.hit"
  | "item.trident.return"
  | "item.trident.riptide_1"
  | "item.trident.riptide_2"
  | "item.trident.riptide_3"
  | "item.trident.throw"
  | "item.trident.thunder"
  | "item.use.on"
  | "jump_to_block"
  | "jump.prevent"
  | "jump"
  | "land"
  | "large.blast"
  | "launch"
  | "lava.pop"
  | "lava"
  | "lay_egg"
  | "lay_spawn"
  | "leashknot.break"
  | "leashknot.place"
  | "levelup"
  | "listening_angry"
  | "listening"
  | "lodestone_compass.link_compass_to_lodestone"
  | "lt.reaction.bleach"
  | "lt.reaction.epaste"
  | "lt.reaction.epaste2"
  | "lt.reaction.fertilizer"
  | "lt.reaction.fire"
  | "lt.reaction.fireball"
  | "lt.reaction.icebomb"
  | "lt.reaction.mgsalt"
  | "lt.reaction.miscexplosion"
  | "lt.reaction.miscfire"
  | "lt.reaction.miscmystical"
  | "lt.reaction.miscmystical2"
  | "lt.reaction.product"
  | "mad"
  | "milk_suspiciously"
  | "milk.screamer"
  | "milk"
  | "mob.armor_stand.place"
  | "mob.player.hurt_drown"
  | "mob.player.hurt_freeze"
  | "mob.player.hurt_on_fire"
  | "mob.warning.baby"
  | "mob.warning"
  | "nearby_close"
  | "nearby_closer"
  | "nearby_closest"
  | "note"
  | "panic"
  | "pant"
  | "particle.soul_escape.loud"
  | "particle.soul_escape.quiet"
  | "pick_berries.cave_vines"
  | "piston.in"
  | "piston.out"
  | "place"
  | "plop"
  | "pop"
  | "portal.travel"
  | "portal"
  | "potion.brewed"
  | "power.off.sculk_sensor"
  | "power.off"
  | "power.on.sculk_sensor"
  | "power.on"
  | "pre_ram.screamer"
  | "pre_ram"
  | "prepare.attack"
  | "prepare.summon"
  | "prepare.wololo"
  | "presneeze"
  | "purr"
  | "purreow"
  | "raid.horn"
  | "ram_impact.screamer"
  | "ram_impact"
  | "random.anvil_use"
  | "reappeared"
  | "record.11"
  | "record.13"
  | "record.5"
  | "record.blocks"
  | "record.cat"
  | "record.chirp"
  | "record.far"
  | "record.mall"
  | "record.mellohi"
  | "record.otherside"
  | "record.pigstep"
  | "record.stal"
  | "record.strad"
  | "record.wait"
  | "record.ward"
  | "remedy"
  | "respawn_anchor.ambient"
  | "respawn_anchor.basalt_deltas.mood"
  | "respawn_anchor.charge"
  | "respawn_anchor.deplete"
  | "respawn_anchor.set_spawn"
  | "retreat"
  | "roar"
  | "saddle"
  | "scared"
  | "scrape"
  | "screech"
  | "shake"
  | "shear"
  | "shoot"
  | "shulker.close"
  | "shulker.open"
  | "shulkerbox.closed"
  | "shulkerbox.open"
  | "sleep"
  | "smithing_table.use"
  | "sneeze"
  | "sonic_boom"
  | "sonic_charge"
  | "sparkler.active"
  | "sparkler.use"
  | "spawn"
  | "splash"
  | "squid.ink_squirt"
  | "squish.big"
  | "squish.small"
  | "stare"
  | "step_lava"
  | "step.baby"
  | "step"
  | "stun"
  | "swim"
  | "swoop"
  | "takeoff"
  | "teleport"
  | "tempt"
  | "thorns"
  | "throw"
  | "thunder"
  | "tilt_down.big_dripleaf"
  | "tilt_up.big_dripleaf"
  | "tongue"
  | "tripod"
  | "twinkle"
  | "ui.cartography_table.take_result"
  | "ui.loom.take_result"
  | "ui.stonecutter.take_result"
  | "unfect"
  | "warn"
  | "water"
  | "whine";
/**
 * If true, the projectile will be shot towards the target of the entity firing it.
 */
export type ShootTarget = boolean;
/**
 * If true, the projectile will bounce upon hit.
 */
export type ShouldBounce = boolean;
/**
 * If true, the projectile will be treated like a splash potion.
 */
export type SplashPotion = boolean;
/**
 * Radius in blocks of the 'splash' effect.
 */
export type SplashRange = number;
/**
 * Determines if the projectile stops when the target is hurt.
 */
export type StopOnHurt = boolean;
/**
 * The base accuracy. Accuracy is determined by the formula uncertaintyBase - difficultyLevel * uncertaintyMultiplier.
 */
export type UncertaintyBase = number;
/**
 * Determines how much difficulty affects accuracy. Accuracy is determined by the formula uncertaintyBase - difficultyLevel * uncertaintyMultiplier.
 */
export type UncertaintyMultiplier = number;

/**
 * Allows the entity to be a thrown entity.
 */
export interface Projectile {
  anchor?: Anchor;
  angle_offset?: AngleOffset;
  catch_fire?: CatchFire;
  crit_particle_on_hurt?: CritParticleOnHurt;
  destroy_on_hurt?: DestroyOnHurt;
  filter?: Filter;
  fire_affected_by_griefing?: FireAffectedByGriefing;
  gravity?: Gravity;
  hit_ground_sound?: HitGroundSound;
  hit_sound?: HitSound;
  homing?: Homing;
  inertia?: Inertia;
  is_dangerous?: IsDangerous;
  knockback?: Knockback;
  lightning?: Lightning;
  liquid_inertia?: LiquidInertia;
  multiple_targets?: MultipleTargets;
  mob_effect?: MobEffect;
  offset?: Offset;
  on_fire_time?: OnFireTime;
  on_hit?: OnHit;
  particle?: Particle;
  potion_effect?: PotionEffect1;
  power?: Power;
  reflect_on_hurt?: ReflectOnHurt;
  semi_random_diff_damage?: SemiRandomDiffDamage1;
  shoot_sound?: ShootSound;
  shoot_target?: ShootTarget;
  should_bounce?: ShouldBounce;
  splash_potion?: SplashPotion;
  splash_range?: SplashRange;
  stop_on_hurt?: StopOnHurt;
  uncertainty_base?: UncertaintyBase;
  uncertainty_multiplier?: UncertaintyMultiplier;
}
/**
 * SEE on_hit/mob_effect.
 */
export interface MobEffect {
  [k: string]: unknown;
}
/**
 * Defines the behaviors that may execute on a projectile's hit, including impact damage, impact effect, and stuck in ground. See more on these parameters below.
 */
export interface OnHit {
  arrow_effect?: ArrowEffect;
  catch_fire?: CatchFire1;
  definition_event?: DefinitionEvent;
  douse_fire?: DouseFire;
  freeze_on_hit?: FreezeOnHit;
  grant_xp?: GrantXP;
  hurt_owner?: HurtOwner;
  ignite?: Ignite1;
  impact_damage?: ImpactDamage;
  mob_effect?: MobEffect1;
  on_fire_time?: OnFireTime1;
  particle_on_hit?: ParticleOnHit;
  potion_effect?: PotionEffect;
  remove_on_hit?: RemoveOnHit;
  spawn_aoe_cloud?: SpawnAOECloud;
  spawn_chance?: SpawnChance;
  stick_in_ground?: StickInGround;
  teleport_owner?: TeleportOwner;
  thrown_potion_effect?: ThrownPotionEffect;
}
/**
 * The target receives a mob effect. See the table below for all arrow_effect parameters.
 */
export interface ArrowEffect {
  apply_effect_to_blocking_targets?: ApplyEffectToBlockingTargets;
}
/**
 * The event that is triggered on a hit. See the table below for all definition event parameters.
 */
export interface DefinitionEvent {
  affect_projectile?: AffectProjectile;
  affect_shooter?: AffectShooter;
  affect_splash_area?: AffectSplashArea;
  affect_target?: AffectTarget;
  event_trigger?: EventTrigger;
  splash_area?: SplashArea;
}
/**
 * An area of entities that is frozen to block on hits. Has shape of either sphere or cube, snap_to_block boolean ,and size decimal properties.
 */
export interface FreezeOnHit {
  shape?: Shape;
  snap_to_block?: SnapToBlock;
  size?: Size;
}
/**
 * Grants XP on hit. Has minXP for minimum XP granted, maxXp for maximum, or simply flat xp properties.
 */
export interface GrantXP {
  minXP?: MinXP;
  maxXP?: MaxXP;
}
/**
 * Determines if the owner of the entity is hurt on hit. Contains decimal owner_damage, knockback boolean, and ignite boolean.
 */
export interface HurtOwner {
  owner_damage?: OwnerDamage;
  knockback?: Knockback1;
  ignite?: Ignite;
}
/**
 * Defines the damage that an entity may receive on being hit by this projectile. See the table below for all impact_damage parameters.
 */
export interface ImpactDamage {
  catch_fire?: CatchFire2;
  channeling?: Channeling;
  damage?: Damage;
  destroy_on_hit?: DestroyOnHit;
  destroy_on_hit_requires_damage?: DestroyOnHitRequiresDamage;
  filter?: Filter1;
  knockback?: Knockback2;
  max_critical_damage?: MaxCriticalDamage;
  min_critical_damage?: MinCriticalDamage;
  power_multiplier?: PowerMultiplier;
  semi_random_diff_damage?: SemiRandomDiffDamage;
  set_last_hurt_requires_damage?: SetLastHurtRequiresDamage;
}
/**
 * The target receives a mob effect. See the table below for all mob_effect parameters.
 */
export interface MobEffect1 {
  ambient?: Ambient;
  amplifier?: Amplifier;
  duration?: Duration;
  durationeasy?: DurationEasy;
  durationhard?: DurationHard;
  durationnormal?: DurationNormal;
  effect?: Effect;
  visible?: Visible;
}
/**
 * The particles that spawn on hit. See the table below for all particle_on_hit parameters.
 */
export interface ParticleOnHit {
  num_particles?: NumParticles;
  on_entity_hit?: OnEntityHit;
  on_other_hit?: OnOtherHit;
  particle_type?: ParticleType;
}
/**
 * Removes the projectile.
 */
export interface RemoveOnHit {
  [k: string]: unknown;
}
/**
 * Contains information on the chance of spawning an entity on hit. See parameters below.
 */
export interface SpawnChance {
  first_spawn_count?: FirstSpawnCount;
  first_spawn_percent_chance?: FirstSpawnPercentChance;
  first_spawn_chance?: FirstSpawnChance;
  second_spawn_chance?: SecondSpawnChance;
  second_spawn_count?: SecondSpawnCount;
  spawn_baby?: SpawnBaby;
  spawn_definition?: SpawnDefinition;
}
/**
 * Decides if the object sticks in ground and contains shake_time integer parameter to determine how long it will shake.
 */
export interface StickInGround {
  [k: string]: unknown;
}
/**
 * Creates a splash area for effects caused by a thrown potion.
 */
export interface ThrownPotionEffect {
  [k: string]: unknown;
}
