/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * The seat that designates the driver of the entity.
 */
export type ControllingSeat = number;
/**
 * If true, this entity can't be interacted with if the entity interacting with it is crouching.
 */
export type CrouchingSkipInteract = boolean;
/**
 * List of entities that can ride this entity.
 */
export type FamilyTypes = string[];
/**
 * The text to display when the player can interact with the entity when playing with Touch-screen controls.
 */
export type InteractText = string;
/**
 * If true, this entity will pull in entities that are in the correct family_types into any available seats.
 */
export type PullInEntities = boolean;
/**
 * If true, this entity will be picked when looked at by the rider.
 */
export type RiderCanInteract = boolean;
/**
 * The number of entities that can ride this entity at the same time.
 */
export type SeatCount = number;
/**
 * The list of positions and number of riders for each position for entities riding this entity.
 */
export type Seats = SeatsSpec | SeatsSpec1[];
/**
 * Position of this seat relative to this entity's position.
 */
export type VectorOf3Items = [] | [X] | [X, Y] | [X, Y, Z];
/**
 * The X component.
 */
export type X = number;
/**
 * The Y component.
 */
export type Y = number;
/**
 * The Z component.
 */
export type Z = number;
/**
 * Offset to rotate riders by.
 */
export type MolangNumber = string | number;

/**
 * Determines whether this entity can be ridden. Allows specifying the different seat positions and quantity.
 */
export interface Rideable {
  controlling_seat?: ControllingSeat;
  crouching_skip_interact?: CrouchingSkipInteract;
  family_types?: FamilyTypes;
  interact_text?: InteractText;
  pull_in_entities?: PullInEntities;
  rider_can_interact?: RiderCanInteract;
  seat_count?: SeatCount;
  seats?: Seats;
}
export interface SeatsSpec {
  /**
   * Angle in degrees that a rider is allowed to rotate while riding this entity. Omit this property for no limit
   */
  lock_rider_rotation?: number;
  /**
   * Defines the maximum number of riders that can be riding this entity for this seat to be valid.
   */
  max_rider_count?: number;
  /**
   * Defines the minimum number of riders that need to be riding this entity before this seat can be used.
   */
  min_rider_count?: number;
  position?: VectorOf3Items;
  rotate_rider_by?: MolangNumber;
}
export interface SeatsSpec1 {
  /**
   * Angle in degrees that a rider is allowed to rotate while riding this entity. Omit this property for no limit
   */
  lock_rider_rotation?: number;
  /**
   * Defines the maximum number of riders that can be riding this entity for this seat to be valid.
   */
  max_rider_count?: number;
  /**
   * Defines the minimum number of riders that need to be riding this entity before this seat can be used.
   */
  min_rider_count?: number;
  position?: VectorOf3Items;
  rotate_rider_by?: MolangNumber;
}
