/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * A bucket for all other items in the game. Note this category is always least priority items.
 */
export type AllItems = boolean;
/**
 * Maximum number of this item the mob will hold.
 */
export type AllItemsMaximumAmount = number;
/**
 * Number of this item considered extra that the entity wants to share.
 */
export type AllItemsSurplusAmount = number;
/**
 * Number of this item this entity wants to share.
 */
export type AllItemsWantAmount = number;
/**
 * Mob will admire the item after picking up by looking at it. For this to happen the mob needs to have an Admire component and an Admire goal.
 */
export type Admire = boolean;
/**
 * Mob will barter for the item after picking it up. For this to work the mob needs to have a Barter component and a Barter goal.
 */
export type Barter = boolean;
/**
 * Determines whether the mob will consume the item or not.
 */
export type ConsumeItem = boolean;
/**
 * Defines the item this entity wants to craft with the item defined above. Should be an item name.
 */
export type CraftInto = string;
/**
 * The name of the item.
 */
export type ItemIdentifier = string;
/**
 * Aux value for the item.
 */
export type ItemAux = number;
/**
 * Maximum number of this item the mob will hold.
 */
export type MaximumAmount = number;
/**
 * Maximum number of this item the mob will pick up during a single goal tick.
 */
export type PickupLimit = number;
/**
 * Prioritizes which items the entity prefers. 0 is the highest priority.
 */
export type Priority = number;
/**
 * Determines whether the mob will try to put the item in its inventory if it has the inventory component and if it can't be equipped.
 */
export type StoredInInventory = boolean;
/**
 * Number of this item considered extra that the entity wants to share.
 */
export type SurplusAmount = number;
/**
 * Number of this item this entity wants to have.
 */
export type WantAmount = number;
/**
 * Determines whether the mob can only pickup the item and not drop it.
 */
export type PickupOnly = boolean;
/**
 * Determines whether the mob can only pickup one item at a time.
 */
export type SingularPickup = boolean;

/**
 * Defines a list of items the mob wants to share or pick up. Each item must have the following parameters:
 */
export interface Shareables {
  all_items?: AllItems;
  all_items_max_amount?: AllItemsMaximumAmount;
  all_items_surplus_amount?: AllItemsSurplusAmount;
  all_items_want_amount?: AllItemsWantAmount;
  /**
   * List of items that the entity wants to share.
   */
  items?: Item[];
  singular_pickup?: SingularPickup;
}
/**
 * An Item that the entity wants to share.
 */
export interface Item {
  admire?: Admire;
  barter?: Barter;
  consume_item?: ConsumeItem;
  craft_into?: CraftInto;
  item?: ItemIdentifier;
  item_aux?: ItemAux;
  max_amount?: MaximumAmount;
  pickup_limit?: PickupLimit;
  priority?: Priority;
  stored_in_inventory?: StoredInInventory;
  surplus_amount?: SurplusAmount;
  want_amount?: WantAmount;
  pickup_only?: PickupOnly;
}
