/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * The name of this feature in the form `namespace_name:feature_name`. `feature_name` must match the filename.
 */
export type Identifier = string;
/**
 * Named reference of feature to be placed.
 */
export type PlacesFeature = string;
/**
 * Dimensions of the Bounding Box.
 */
export type BoundingBoxMin = [] | [X] | [X, Y] | [X, Y, Z];
export type X = number;
export type Y = number;
export type Z = number;
/**
 * Dimensions of the Bounding Box.
 */
export type BoundingBoxMax = [] | [X1] | [X1, Y1] | [X1, Y1, Z1];
export type X1 = number;
export type Y1 = number;
export type Z1 = number;
/**
 * Y Delta for BAS.
 */
export type YDelta = number;
/**
 * Reference to the block to be placed.
 */
export type SurfaceBlockType = string;
/**
 * Reference to the block to be placed.
 */
export type SubsurfaceBlockType = string;
/**
 * Y Delta for BAS.
 */
export type BeardRaggednessMin = number;
/**
 * Y Delta for BAS.
 */
export type BeardRaggednessMax = number;

/**
 * `minecraft:beards_and_shavers` will build a `beard` or `shave` out space so as to provide a clear space for a feature to place.
 * Succeeds if: a beard/shave is made (this should always happen).
 * Fails if: will always return placement pos, but interior feature placement not guaranteed.
 */
export interface BeardsAndShavers {
  description: Description;
  places_feature: PlacesFeature;
  bounding_box_min: BoundingBoxMin;
  bounding_box_max: BoundingBoxMax;
  y_delta: YDelta;
  surface_block_type: SurfaceBlockType;
  subsurface_block_type: SubsurfaceBlockType;
  beard_raggedness_min?: BeardRaggednessMin;
  beard_raggedness_max?: BeardRaggednessMax;
}
/**
 * UNDOCUMENTED.
 */
export interface Description {
  identifier: Identifier;
  [k: string]: unknown;
}
