/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * The name of this feature in the form `namespace_name:feature_name`. `feature_name` must match the filename.
 */
export type Identifier = string;
/**
 * The block to fill the inside of the geode.
 */
export type Filler = string;
/**
 * The block that forms the inside layer of the geode shell.
 */
export type InnerLayer = string;
/**
 * The block that has a chance of generating instead of inner_layer.
 */
export type AlternateInnerLayer = string;
/**
 * The block that forms the middle layer of the geode shell.
 */
export type MiddleLayer = string;
/**
 * The block that forms the outer shell of the geode.
 */
export type OuterLayer = string;
/**
 * A list of blocks that may be replaced during placement. Omit this field to allow any block to be replaced.
 *
 * @minItems 1
 */
export type InnerPlacements = [BlockReference, ...BlockReference[]];
/**
 * A block that may be replaced during placement.
 */
export type BlockReference = string;
/**
 * The minimum distance each distribution point must be from the outer wall. [0,10]
 */
export type MinimumOuterWallDistance = number;
/**
 * The maximum distance each distribution point can be from the outer wall. [0,20]
 */
export type MaximumOuterWallDistance = number;
/**
 * The minimum number of points inside the distance field that can get generated. The distance field is the area consisting of all points with a minimum distance to all destribution points. [0,10]
 */
export type MinimumDistributionPoints = number;
/**
 * The maximum number of points inside the distance field that can get generated. The distance field is the area consisting of all points with a minimum distance to all destribution points. [0,20]
 */
export type MaximumDistributionPoints = number;
/**
 * The lowest possible value of random offset applied to the position of each distribution point. [0,10]
 */
export type MinimumPointOffset = number;
/**
 * The highest possible value of random offset applied to the position of each distribution point. [0,10]
 */
export type MaximumPointOffset = number;
/**
 * The maximum possible radius of the geode generated.
 */
export type MaximumRadius = number;
/**
 * An offset applied to each distribution point that forms the geode crack opening. [0,10]
 */
export type CrackPointOffset = number;
/**
 * The likelihood of a geode generating with a crack in its shell. [0,1]
 */
export type GenerateCrackChance = number;
/**
 * How large the crack opening of the geode should be when generated. [0,5]
 */
export type BaseCrackSize = number;
/**
 * A multiplier applied to the noise that is applied to the distribution points within the geode. Higher = more noisy.
 */
export type NoiseMultiplier = number;
/**
 * The likelihood that a special block will be placed on the inside of the geode. [0,1]
 */
export type UsePotentialPlacementsChance = number;
/**
 * The likelihood that a block in the innermost layer of the geode will be replaced with an alternate option. [0,1]
 */
export type UseAlternateLayer0Chance = number;
/**
 *  If true, the potential placement block will only be placed on the alternate layer0 blocks that get placed. Potential placement blocks are blocks that depend on the existance of another block to be placed. The latter are the layer0 alternate blocks.
 */
export type PlacementsRequireLayer0Alternate = boolean;
/**
 * The threshold of invalid blocks for a geode to have a distribution point in before it aborts generation entirely.
 */
export type InvalidBlocksThreshold = number;

/**
 * `minecraft:geode_feature` generates a rock formation to simulate a geode. Each layer of, and block within, the geode can be replaced.
 * Succeeds if: At least one block within the geode is placed.
 * Fails if: All blocks within the geode fail to be placed.
 */
export interface GeodeFeature {
  description: Description;
  filler: Filler;
  inner_layer: InnerLayer;
  alternate_inner_layer: AlternateInnerLayer;
  middle_layer: MiddleLayer;
  outer_layer: OuterLayer;
  inner_placements?: InnerPlacements;
  min_outer_wall_distance: MinimumOuterWallDistance;
  max_outer_wall_distance: MaximumOuterWallDistance;
  min_distribution_points: MinimumDistributionPoints;
  max_distribution_points: MaximumDistributionPoints;
  min_point_offset: MinimumPointOffset;
  max_point_offset: MaximumPointOffset;
  max_radius: MaximumRadius;
  crack_point_offset: CrackPointOffset;
  generate_crack_chance: GenerateCrackChance;
  base_crack_size: BaseCrackSize;
  noise_multiplier: NoiseMultiplier;
  use_potential_placements_chance: UsePotentialPlacementsChance;
  use_alternate_layer0_chance: UseAlternateLayer0Chance;
  placements_require_layer0_alternate: PlacementsRequireLayer0Alternate;
  invalid_blocks_threshold: InvalidBlocksThreshold;
}
/**
 * UNDOCUMENTED.
 */
export interface Description {
  identifier: Identifier;
  [k: string]: unknown;
}
