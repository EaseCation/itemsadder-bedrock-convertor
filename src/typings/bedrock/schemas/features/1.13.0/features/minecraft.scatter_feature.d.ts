/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * The name of this feature in the form `namespace_name:feature_name`. `feature_name` must match the filename.
 */
export type Identifier = string;
/**
 * Named reference of feature to be placed.
 */
export type PlacesFeature = string;
/**
 * If true, snaps the y-value of the scattered position to the terrain heightmap. If false or unset, y-value is unmodified.
 */
export type ProjectInputToFloor = boolean;
/**
 * Number of scattered positions to generate.
 */
export type Iterations = string | number;
export type ScatterChance =
  | {
      numerator?: Numerator;
      denominator?: Denominator;
    }
  | MolangNumber;
/**
 * UNDOCUMENTED.
 */
export type Numerator = number;
/**
 * UNDOCUMENTED.
 */
export type Denominator = number;
/**
 * Probability (0-100] that this scatter will occur. Not evaluated each iteration; either no iterations will run, or all will.
 */
export type MolangNumber = string | number;
/**
 * The order in which coordinates will be evaluated. Should be used when a coordinate depends on another. If omitted, defaults to `xzy`.
 */
export type CoordinateEvalOrder = "xyz" | "xzy" | "yxz" | "yzx" | "zxy" | "zyx";
export type X =
  | MolangNumber1
  | {
      distribution: Distribution;
      step_size?: StepSize;
      grid_offset?: StepSize1;
      extent: Extent;
    };
/**
 * Expression for the coordinate (evaluated each iteration). Mutually exclusive with random distribution object below.
 */
export type MolangNumber1 = string | number;
/**
 * Type of distribution - uniform random, gaussian (centered in the range), or grid (either fixed-step or jittered).
 */
export type Distribution = "uniform" | "gaussian" | "inverse_gaussian" | "fixed_grid" | "jittered_grid";
/**
 * When the distribution type is grid, defines the distance between steps along this axis.
 */
export type StepSize = number;
/**
 * When the distribution type is grid, defines the offset along this axis.
 */
export type StepSize1 = number;
/**
 * UNDOCUMENTED.
 */
export type Extent = [] | [LowerBound] | [LowerBound, UpperBound];
/**
 * Lower bound (inclusive) of the scatter range, as an offset from the input point to scatter around.
 */
export type LowerBound = string | number;
/**
 * Upper bound (inclusive) of the scatter range, as an offset from the input point to scatter around.
 */
export type UpperBound = string | number;
export type X1 =
  | MolangNumber1
  | {
      distribution: Distribution;
      step_size?: StepSize;
      grid_offset?: StepSize1;
      extent: Extent;
    };
export type X2 =
  | MolangNumber1
  | {
      distribution: Distribution;
      step_size?: StepSize;
      grid_offset?: StepSize1;
      extent: Extent;
    };

/**
 * `minecraft:scatter_feature` scatters a feature throughout a chunk. The `x`, `y`, and `z` fields are per-coordinate parameters.
 * Note that coordinates represent an offset from the input position, not an absolute position. Coordinates may be a single value, a random distribution, or molang expression that resolves to a numeric value. The `coordinate_eval_order` field is provided for finer control of coordinate resolution (particularly when using the `grid` distribution). `iterations` controls how many individual placements should occur if the `scatter_chance` check succeeds. The `scatter_chance` check happens once, so either all placements will run or none will.
 * Succeeds if: At least one feature placement succeeds.
 * Fails if: All feature placements fail.
 */
export interface ScatterFeature {
  description: Description;
  places_feature: PlacesFeature;
  project_input_to_floor?: ProjectInputToFloor;
  iterations?: Iterations;
  scatter_chance?: ScatterChance;
  coordinate_eval_order?: CoordinateEvalOrder;
  x?: X;
  y?: X1;
  z?: X2;
}
/**
 * UNDOCUMENTED.
 */
export interface Description {
  identifier: Identifier;
  [k: string]: unknown;
}
