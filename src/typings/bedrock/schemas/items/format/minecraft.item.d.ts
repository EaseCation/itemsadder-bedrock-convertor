/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * The identifier for this item. The name must include a namespace and must not use the Minecraft namespace unless overriding a Vanilla item.
 */
export type Identifier = string;
/**
 * The category for this item. Categories are used to control high level properties of how the item is integrated into the bedrock engine, such as whether it can be used in slash commands.
 */
export type Category = string;
/**
 * If this item is experimental, it will only be registered if the world is marked as experimental.
 */
export type IsExperimental = boolean;
/**
 * How much protection does the armor item have.
 */
export type Protection = number;
/**
 * Texture Type to apply for the armor. Note that Horse armor is restricted to leather, iron, gold, or diamond.
 */
export type TextureType =
  | "gold"
  | "none"
  | "leather"
  | "chain"
  | "iron"
  | "diamond"
  | "elytra"
  | "turtle"
  | "netherite";
/**
 * Set the placement block name for the planter item.
 */
export type Block = string;
/**
 * Tags.
 */
export type Tags = string;
/**
 * List of block descriptors that contain blocks that this item can be used on. If left empty, all blocks will be allowed.
 */
export type UseOn = AllowedBlock[];
/**
 * The type of cool down for this item.
 */
export type Category1 = string;
/**
 * The duration of time this item will spend cooling down before becoming usable again.
 */
export type Duration = number;
/**
 * Toggles if the item will be used efficiently.
 */
export type UseEfficiency = boolean;
/**
 * Speed.
 */
export type Speed = number;
/**
 * Trigger for when you dig a block that isn't listed in destroy_speeds.
 */
export type OnDig = string;
export type Block1 =
  | string
  | {
      any_tag?: AnyBlockTag;
    };
export type BlockTag = string;
/**
 * The block tag.
 */
export type AnyBlockTag = BlockTag[];
/**
 * Destroy speed per block.
 */
export type DestroySpeeds = DestroySpeed[];
/**
 * Trigger for when you dig a block that isn't listed in destroy_speeds.
 */
export type OnDig1 = string;
/**
 * Set the display name for an item.
 */
export type Value = string;
/**
 * The minimum.
 */
export type Min = number;
/**
 * The maximum.
 */
export type Max = number;
/**
 * Maximum durability is the amount of damage that this item can take before breaking.
 */
export type MaximumDurability = number;
/**
 * Defines what color the dye is.
 */
export type Color =
  | "black"
  | "red"
  | "green"
  | "brown"
  | "blue"
  | "purple"
  | "cyan"
  | "silver"
  | "gray"
  | "pink"
  | "lime"
  | "yellow"
  | "lightblue"
  | "magenta"
  | "orange"
  | "white";
/**
 * The entity to be placed in the world.
 */
export type Entity = string;
/**
 * List of block descriptors that contain blocks that this item can be dispensed on. If left empty, all blocks will be allowed.
 */
export type DispenseOn = BlockDescriptor[];
/**
 * List of block descriptors that contain blocks that this item can be used on. If left empty, all blocks will be allowed.
 */
export type UseOn1 = BlockDescriptor1[];
/**
 * Foil or glint.
 */
export type Foil = boolean;
/**
 * If true you can always eat this item (even when not hungry), defaults to false.
 */
export type CanAlwaysEat = boolean;
/**
 * How much nutrition does this food item give the player when eaten.
 */
export type Nutrition = number;
/**
 * UNDOCUMENTED.
 */
export type Event = string;
/**
 * UNDOCUMENTED.
 */
export type Target = "self";
/**
 * If true, this food item is considered meat.
 */
export type IsMeat = boolean;
/**
 * How long in seconds will this fuel cook items for.
 */
export type Duration1 = number;
/**
 * Is this a hand equipped item.
 */
export type HandEquipped = boolean;
/**
 * An index or expression for which frame of the icon to display. Default resolves to 0.
 */
export type Frame = Frame1 & Frame2;
export type Frame1 = number;
export type Frame2 = string;
/**
 * Legacy texture id for older item icons.
 */
export type Texture = string;
/**
 * The key from the resource_pack/textures/item_texture.json `texture_data` object associated with the texture file Example: blaze_powder.
 */
export type Texture1 = string;
/**
 * Amount of knockback resistance provided with the total maximum protection being 1.0
 */
export type Protection1 = number;
/**
 * Maximum Damage.
 */
export type MaxDamage = number;
/**
 * Maximum stack size.
 */
export type MaxStackSize = number;
/**
 * Event trigger for when the item is used.
 */
export type Event1 = string;
/**
 * Event target (block).
 */
export type Target1 = "block";
/**
 * Event trigger for when the item is used.
 */
export type Event2 = string;
/**
 * Event Target.
 */
export type Target2 = "self";
/**
 * How long you must charge a projectile for it to critically hit.
 */
export type MinimumCriticalPower = number;
/**
 * The entity to be fired as a projectile.
 */
export type ProjectileEntity = string;
/**
 * Right hand transform data.
 */
export type MainHand = string;
/**
 * Left hand transform data.
 */
export type OffHand = string;
/**
 * UNDOCUMENTED.
 */
export type Item1 = string;
/**
 * UNDOCUMENTED.
 */
export type Items = Item1[];
/**
 * UNDOCUMENTED.
 */
export type RepairAmount = string | number;
/**
 * Repair item entries.
 */
export type RepairItems = ReparItem[];
/**
 * UNDOCUMENTED.
 */
export type Item2 = string;
/**
 * UNDOCUMENTED.
 */
export type UseOffhand = boolean;
/**
 * UNDOCUMENTED.
 */
export type SearchInventory = boolean;
/**
 * UNDOCUMENTED.
 */
export type UseInCreative = boolean;
/**
 * Ammunition.
 */
export type Ammunition = Ammunition1[];
/**
 * Charge on draw? Default is set to false.
 */
export type ChargeOnDraw = boolean;
/**
 * Draw Duration. Default is set to 0.
 */
export type MaximumDrawDuration = number;
/**
 * Scale power by draw duration? Default is set to false.
 */
export type ScalePowerByDrawDuration = boolean;
/**
 * Whether the item should use the swing animation when thrown. Default is set to false.
 */
export type DoSwingAnimation = boolean;
/**
 * The scale at which the power of the throw increases. Default is set to 1.0.
 */
export type LaunchPowerScale = number;
/**
 * The maximum duration to draw a throwable item. Default is set to 0.0.
 */
export type MaximumDrawDuration1 = number;
/**
 * The minimum duration to draw a throwable item. Default is set to 0.0.
 */
export type MinimumDrawDuration = number;
/**
 * The maximum power to launch the throwable item. Default is set to 1.0.
 */
export type MaximumLaunchPower = number;
/**
 * Whether or not the power of the throw increases with duration charged. Default is set to false.
 */
export type ScalePowerByDrawDuration1 = boolean;
/**
 * How long to use before item is done being used.
 */
export type UseDuration = number;
/**
 * Sets if the item can be dropped by a dispenser block
 */
export type Dispensable = boolean;
/**
 * Which equipment slot the item can fit in
 */
export type Slot =
  | "slot.weapon.mainhand"
  | "none"
  | "slot.weapon.offhand"
  | "slot.armor.head"
  | "slot.armor.chest"
  | "slot.armor.legs"
  | "slot.armor.feet"
  | "slot.hotbar"
  | "slot.inventory"
  | "slot.enderchest"
  | "slot.saddle"
  | "slot.armor"
  | "slot.chest"
  | "slot.equippable";
/**
 * UNDOCUMENTED.
 */
export type Effect = string;
/**
 * UNDOCUMENTED.
 */
export type Target3 = "holder";
/**
 * UNDOCUMENTED.
 */
export type Duration2 = number;
/**
 * UNDOCUMENTED.
 */
export type Amplifier = number;
/**
 * UNDOCUMENTED.
 */
export type Type = "magic";
/**
 * UNDOCUMENTED.
 */
export type Amount = number;
/**
 * UNDOCUMENTED.
 */
export type Effect1 = string;
/**
 * UNDOCUMENTED.
 */
export type Target4 = "holder";
/**
 * UNDOCUMENTED.
 */
export type AngleOffset = number;
/**
 * UNDOCUMENTED.
 */
export type LaunchPower = number;
/**
 * UNDOCUMENTED.
 */
export type Projectile1 = string;
/**
 * UNDOCUMENTED.
 */
export type Target5 = "holder";
/**
 * UNDOCUMENTED.
 */
export type MaximumRange = [] | [X] | [X, Y] | [X, Y, Z];
/**
 * UNDOCUMENTED.
 */
export type X = number;
/**
 * UNDOCUMENTED.
 */
export type Y = number;
/**
 * UNDOCUMENTED.
 */
export type Z = number;
/**
 * UNDOCUMENTED.
 */
export type Transform = string;
/**
 * UNDOCUMENTED.
 */
export type Sequence = Sequence1[];
/**
 * UNDOCUMENTED.
 */
export type Weight = number;
/**
 * UNDOCUMENTED.
 */
export type Randomize = Randomize1[];
/**
 * UNDOCUMENTED.
 */
export type Command1 = string;
/**
 * UNDOCUMENTED.
 */
export type Command = Command1[];
/**
 * UNDOCUMENTED.
 */
export type Target6 = "other";

/**
 * UNDOCUMENTED.
 */
export interface Item {
  description: Description;
  /**
   * The components of this item.
   */
  components?: {
    "minecraft:armor"?: Armor;
    "minecraft:block_placer"?: BlockPlacer;
    "minecraft:cooldown"?: Cooldown;
    "minecraft:digger"?: Digger;
    "minecraft:display_name"?: DisplayName;
    "minecraft:durability"?: Durability;
    "minecraft:dye_powder"?: DyePowder;
    "minecraft:entity_placer"?: EntityPlacer;
    "minecraft:foil"?: Foil;
    "minecraft:food"?: Food;
    "minecraft:fuel"?: Fuel;
    "minecraft:hand_equipped"?: HandEquipped;
    "minecraft:icon"?: Icon;
    "minecraft:knockback_resistance"?: KnockbackResistance;
    "minecraft:max_damage"?: MaxDamage;
    "minecraft:max_stack_size"?: MaxStackSize;
    "minecraft:on_use_on"?: OnUseOn;
    "minecraft:on_use"?: OnUse;
    "minecraft:projectile"?: Projectile;
    "minecraft:render_offsets"?: RenderOffsets;
    "minecraft:repairable"?: Repairable;
    "minecraft:shooter"?: Shooter;
    "minecraft:stacked_by_data"?: KnockbackResistance;
    "minecraft:throwable"?: Throwable;
    "minecraft:use_duration"?: UseDuration;
    "minecraft:weapon"?: Weapon;
    "minecraft:wearable"?: Wearable;
    [k: string]: {
      [k: string]: unknown;
    };
  };
  events?: Events;
}
/**
 * UNDOCUMENTED.
 */
export interface Description {
  identifier?: Identifier;
  category?: Category;
  is_experimental?: IsExperimental;
}
/**
 * The armor item component determines the amount of protection you have in your armor item.
 */
export interface Armor {
  protection: Protection;
  texture_type: TextureType;
}
/**
 * Planter item component. planter items are items that can be planted.
 */
export interface BlockPlacer {
  block: Block;
  use_on?: UseOn;
}
/**
 * A block descriptor that allows to be placed.
 */
export interface AllowedBlock {
  tags?: Tags;
  [k: string]: unknown;
}
/**
 * Cool down time for a component. After you use an item it becomes unusable for the duration specified by the `cool down time` setting in this component.
 */
export interface Cooldown {
  category: Category1;
  duration: Duration;
}
/**
 * Digger item. Component put on items that dig.
 */
export interface Digger {
  use_efficiency?: UseEfficiency;
  destroy_speeds: DestroySpeeds;
  on_dig?: OnDig1;
}
/**
 * Destroy speed per block.
 */
export interface DestroySpeed {
  speed?: Speed;
  on_dig?: OnDig;
  block?: Block1;
}
/**
 * Display Name item component. Display Names display the name of an item.
 */
export interface DisplayName {
  value: Value;
}
/**
 * Durability item component: how much damage can this item take before breaking.
 */
export interface Durability {
  damage_chance: DamageChance;
  max_durability?: MaximumDurability;
}
/**
 * Damage chance.
 */
export interface DamageChance {
  min: Min;
  max: Max;
}
/**
 * Dye powder, there are 16 kinds of dye.
 */
export interface DyePowder {
  color: Color;
}
/**
 * Entity placer item component. You can specifiy allowed blocks that the item is restricted to.
 */
export interface EntityPlacer {
  entity: Entity;
  dispense_on?: DispenseOn;
  use_on?: UseOn1;
}
/**
 * Block that item can be dispensed on.
 */
export interface BlockDescriptor {
  [k: string]: unknown;
}
/**
 * Block that item can be used on
 */
export interface BlockDescriptor1 {
  [k: string]: unknown;
}
/**
 * When an item has a food component, it becomes edible to the player.
 */
export interface Food {
  can_always_eat?: CanAlwaysEat;
  nutrition?: Nutrition;
  on_consume?: OnConsume;
  is_meat?: IsMeat;
}
/**
 * UNDOCUMENTED.
 */
export interface OnConsume {
  event?: Event;
  target?: Target;
}
/**
 * Fuel component. Allows this item to be used as fuel in a furnace to `cook` other items.
 */
export interface Fuel {
  duration: Duration1;
}
/**
 * The icon item componenent determines the icon to represent the item in the UI and elsewhere.
 */
export interface Icon {
  frame?: Frame;
  legacy_id?: Texture;
  texture: Texture1;
}
/**
 * Knockback Resistance Item. Component put on items that provide knockback resistance.
 */
export interface KnockbackResistance {
  protection: Protection1;
}
/**
 * The on_use_on item component allows you to receive an event when the item is used on a block in the world.
 */
export interface OnUseOn {
  on_use_on: OnUseOn1;
}
/**
 * Event trigger for when the item is used.
 */
export interface OnUseOn1 {
  event?: Event1;
  target?: Target1;
}
/**
 * The on_use item component allows you to receive an event when the item is used.
 */
export interface OnUse {
  on_use: OnUse1;
}
/**
 * Event trigger for when the item is used.
 */
export interface OnUse1 {
  event?: Event2;
  target?: Target2;
}
/**
 * Compels the item shoot, like an arrow.  Pair with minecraft:shooter for dispensers or as ammunition.  Pair with minecraft:throwable to set the entity spawned.
 */
export interface Projectile {
  minimum_critical_power?: MinimumCriticalPower;
  projectile_entity: ProjectileEntity;
}
/**
 * Render offsets component: optional values can be given to offset the way the item is rendered. Depreciated in json formats 1.20.10 and higher
 */
export interface RenderOffsets {
  main_hand?: MainHand;
  off_hand?: OffHand;
}
/**
 * Repairable item component: how much damage can this item repair, what items can repair it.
 */
export interface Repairable {
  on_repaired?: OnRepaired;
  repair_items?: RepairItems;
}
/**
 * Event that is called when this item has been repaired.
 */
export interface OnRepaired {
  [k: string]: unknown;
}
/**
 * UNDOCUMENTED.
 */
export interface ReparItem {
  items?: Items;
  repair_amount?: RepairAmount;
}
/**
 * Shooter Item Component.
 */
export interface Shooter {
  ammunition?: Ammunition;
  charge_on_draw?: ChargeOnDraw;
  max_draw_duration?: MaximumDrawDuration;
  scale_power_by_draw_duration?: ScalePowerByDrawDuration;
}
/**
 * UNDOCUMENTED.
 */
export interface Ammunition1 {
  item?: Item2;
  use_offhand?: UseOffhand;
  search_inventory?: SearchInventory;
  use_in_creative?: UseInCreative;
}
/**
 * Throwable item component. Throwable items, such as a snowball.
 */
export interface Throwable {
  do_swing_animation?: DoSwingAnimation;
  launch_power_scale?: LaunchPowerScale;
  max_draw_duration?: MaximumDrawDuration1;
  min_draw_duration?: MinimumDrawDuration;
  max_launch_power?: MaximumLaunchPower;
  scale_power_by_draw_duration?: ScalePowerByDrawDuration1;
}
/**
 * Weapon Item Component. Added to every weapon item such as axe, sword, trident, bow, crossbow.
 */
export interface Weapon {
  on_hit_block?: OnHitBlock;
  on_hurt_entity?: OnHurtEntity;
  on_not_hurt_entity?: OnNotHurtEntity;
}
/**
 * Trigger for letting you know when this item is used to hit a block.
 */
export interface OnHitBlock {}
/**
 * Trigger for letting you know when this item is used to hurt another mob.
 */
export interface OnHurtEntity {}
/**
 * Trigger for letting you know when this item hit another actor, but didn't do damage.
 */
export interface OnNotHurtEntity {}
/**
 * Wearable item component.
 */
export interface Wearable {
  dispensable?: Dispensable;
  slot?: Slot;
}
/**
 * UNDOCUMENTED.
 */
export interface Events {
  on_consume?: Event3;
  [k: string]: Event3;
}
/**
 * UNDOCUMENTED.
 */
export interface Event3 {
  sequence?: Sequence;
  randomize?: Randomize;
  run_command?: RunCommand;
}
/**
 * UNDOCUMENTED.
 */
export interface Sequence1 {
  add_mob_effect?: AddMobEffect;
  damage?: Shoot;
  decrement_stack?: DecrementStack;
  remove_mob_effect?: RemoveMobEffect;
  shoot?: Shoot1;
  swing?: Swing;
  teleport?: Teleport;
  transform_item?: TransformItem;
  [k: string]: unknown;
}
/**
 * UNDOCUMENTED.
 */
export interface AddMobEffect {
  effect?: Effect;
  target?: Target3;
  duration?: Duration2;
  amplifier?: Amplifier;
}
/**
 * UNDOCUMENTED.
 */
export interface Shoot {
  type?: Type;
  amount?: Amount;
}
/**
 * UNDOCUMENTED.
 */
export interface DecrementStack {}
/**
 * UNDOCUMENTED.
 */
export interface RemoveMobEffect {
  effect?: Effect1;
  target?: Target4;
}
/**
 * UNDOCUMENTED.
 */
export interface Shoot1 {
  angle_offset?: AngleOffset;
  launch_power?: LaunchPower;
  projectile?: Projectile1;
}
/**
 * UNDOCUMENTED.
 */
export interface Swing {}
/**
 * UNDOCUMENTED.
 */
export interface Teleport {
  target?: Target5;
  max_range?: MaximumRange;
}
/**
 * UNDOCUMENTED.
 */
export interface TransformItem {
  transform?: Transform;
}
/**
 * UNDOCUMENTED.
 */
export interface Randomize1 {
  weight: Weight;
  [k: string]: unknown;
}
/**
 * UNDOCUMENTED.
 */
export interface RunCommand {
  command?: Command;
  target?: Target6;
}
