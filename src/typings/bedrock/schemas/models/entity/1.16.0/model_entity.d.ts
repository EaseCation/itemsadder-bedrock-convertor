/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * UNDOCUMENTED.
 */
export type Debug = boolean;
/**
 * A version that tells minecraft what type of data format can be expected when reading this file.
 */
export type FormatVersion = string;
/**
 * The collection of geometries.
 *
 * @minItems 1
 */
export type Geometry = [Model, ...Model[]];
/**
 * Entity definition and Client Block definition files refer to this geometry via this identifier.
 */
export type Identifier = string;
/**
 * Assumed width in texels of the texture that will be bound to this geometry.
 */
export type TextureWidth = number;
/**
 * Assumed height in texels of the texture that will be bound to this geometry.
 */
export type TextureHeight = number;
/**
 * Offset of the visibility bounding box from the entity location point (in model space units).
 *
 * @minItems 3
 * @maxItems 3
 */
export type VisibleBoundsOffset = [number, number, number];
/**
 * Width of the visibility bounding box (in model space units).
 */
export type VisibleBoundsWidth = number;
/**
 * Height of the visible bounding box (in model space units).
 */
export type VisibleBoundsHeight = number;
/**
 * useful for items. A molang expression specifying the bone name of the parent skeletal hierarchy that this bone should use as the root transform. Without this field it will look for a bone in the parent entity with the same name as this bone. If both are missing, it will assume a local skeletal hierarchy (via the `parent` field). If that is also missing, it will attach to the owning entity's root transform.
 */
export type Binding = string;
/**
 * If this field is specified, rotation of this cube occurs around this point, otherwise its rotation is around the center of the box. Note that in 1.12 this is flipped upside-down, but is fixed in 1.14.
 */
export type Pivot = [] | [X] | [X, Y] | [X, Y, Z];
/**
 * If this field is specified, rotation of this cube occurs around this point, otherwise its rotation is around the center of the box. Note that in 1.12 this is flipped upside-down, but is fixed in 1.14.
 */
export type X = number;
/**
 * If this field is specified, rotation of this cube occurs around this point, otherwise its rotation is around the center of the box. Note that in 1.12 this is flipped upside-down, but is fixed in 1.14.
 */
export type Y = number;
/**
 * If this field is specified, rotation of this cube occurs around this point, otherwise its rotation is around the center of the box. Note that in 1.12 this is flipped upside-down, but is fixed in 1.14.
 */
export type Z = number;
/**
 * UNDOCUMENTED.
 */
export type Reset = boolean;
/**
 * @minItems 3
 * @maxItems 3
 */
export type Rotation = [number, number, number];
/**
 * The cube extends this amount relative to its origin (in model space units).
 */
export type Size = [] | [X1] | [X1, Y1] | [X1, Y1, Z1];
/**
 * The cube extends this amount relative to its origin (in model space units).
 */
export type X1 = number;
/**
 * The cube extends this amount relative to its origin (in model space units).
 */
export type Y1 = number;
/**
 * The cube extends this amount relative to its origin (in model space units).
 */
export type Z1 = number;
/**
 * This is an alternate per-face uv mapping which specifies each face of the cube. Omitting a face will cause that face to not get drawn.
 */
export type Uv =
  | {
      north?: North;
      south?: South;
      east?: East;
      west?: West;
      up?: Up;
      down?: Down;
    }
  | []
  | [X3]
  | [X3, Y3];
/**
 * Specifies the uv origin for the face. For this face, it is the upper-left corner, when looking at the face with y being up.
 */
export type Uv1 = [] | [X2] | [X2, Y2];
/**
 * The x component of the uv.
 */
export type X2 = number;
/**
 * The y component of the uv.
 */
export type Y2 = number;
/**
 * The face maps this many texels from the uv origin. If not specified, the box dimensions are used instead.
 */
export type UvSize = [] | [X2] | [X2, Y2];
/**
 * Specifies the UV's for the face that stretches.
 */
export type MaterialInstance = string;
/**
 * The x component of the uv.
 */
export type X3 = number;
/**
 * The y component of the uv.
 */
export type Y3 = number;
/**
 * This is the list of cubes associated with this bone.
 */
export type Cubes = {
  /**
   * Grow this box by this additive amount in all directions (in model space units), this field overrides the bone's inflate field for this cube only.
   */
  inflate?: number;
  /**
   * Mirrors this cube about the unrotated x axis (effectively flipping the east / west faces), overriding the bone's `mirror` setting for this cube.
   */
  mirror?: boolean;
  /**
   * @minItems 3
   * @maxItems 3
   */
  origin?: [number, number, number];
  pivot?: Pivot;
  reset?: Reset;
  rotation?: Rotation;
  size?: Size;
  uv?: Uv;
}[];
/**
 * Mirrors the UV's of the unrotated cubes along the x axis, also causes the east/west faces to get flipped.
 */
export type Mirror = boolean;
/**
 * Animation files refer to this bone via this identifier.
 */
export type Name = string;
/**
 * Bone that this bone is relative to. If the parent bone moves, this bone will move along with it.
 */
export type Parent = string;
/**
 * The bone pivots around this point (in model space units).
 */
export type Pivot1 = [] | [X4] | [X4, Y4] | [X4, Y4, Z2];
export type X4 = number;
export type Y4 = number;
export type Z2 = number;
/**
 * This is the initial rotation of the bone around the pivot, pre-animation (in degrees, x-then-y-then-z order).
 */
export type Rotation1 = [] | [X5] | [X5, Y5] | [X5, Y5, Z3];
/**
 * in degrees.
 */
export type X5 = number;
/**
 * in degrees.
 */
export type Y5 = number;
/**
 * in degrees.
 */
export type Z3 = number;
/**
 * ***EXPERIMENTAL*** Adds a mesh to the bone's geometry by converting texels in a texture into boxes.
 */
export type TextureMeshes = {
  /**
   * The pivot point on the texture (in *texture space* not entity or bone space) of the texture geometry.
   *
   * @minItems 3
   * @maxItems 3
   */
  local_pivot?: [number, number, number];
  /**
   * The position of the pivot point after rotation (in *entity space* not texture or bone space) of the texture geometry.
   *
   * @minItems 3
   * @maxItems 3
   */
  position?: [number, number, number];
  /**
   * The rotation (in degrees) of the texture geometry relative to the offset.
   *
   * @minItems 3
   * @maxItems 3
   */
  rotation?: [number, number, number];
  /**
   * The scale (in degrees) of the texture geometry relative to the offset.
   *
   * @minItems 3
   * @maxItems 3
   */
  scale?: [number, number, number];
  /**
   * The friendly-named texture to use.
   */
  texture: string;
}[];
/**
 * Bones define the `skeleton` of the mob: the parts that can be animated, and to which geometry and other bones are attached.
 */
export type Bones = {
  binding?: Binding;
  cubes?: Cubes;
  debug?: boolean;
  /**
   * Grow this box by this additive amount in all directions (in model space units).
   */
  inflate?: number;
  /**
   * This is a list of locators associated with this bone. A locator is a point in model space that tracks a particular bone as the bone animates (by maintaining it's relationship to the bone through the animation).
   */
  locators?: {
    [k: string]:
      | {
          /**
           * Position of the locator in model space.
           *
           * @minItems 3
           * @maxItems 3
           */
          offset: [number, number, number];
          /**
           * Rotation of the locator in model space.
           *
           * @minItems 3
           * @maxItems 3
           */
          rotation: [number, number, number];
          /**
           * Discard scale inherited from parent bone.
           */
          ignore_inherited_scale?: boolean;
          [k: string]: unknown;
        }
      | [number, number, number];
  };
  mirror?: Mirror;
  name: Name;
  parent?: Parent;
  pivot?: Pivot1;
  /**
   * ***EXPERIMENTAL*** A triangle or quad mesh object. Can be used in conjunction with cubes and texture geometry.
   */
  poly_mesh?: {
    /**
     * If true, UVs are assumed to be [0-1]. If false, UVs are assumed to be [0-texture_width] and [0-texture_height] respectively.
     */
    normalized_uvs?: boolean;
    /**
     * Vertex normals. Can be either indexed via the `polys` section, or be a quad-list if mapped 1-to-1 to the positions and UVs sections.
     */
    normals?: [number, number, number][];
    polys:
      | ("tri_list" | "quad_list")
      | [[number, number, number], [number, number, number], [number, number, number]]
      | [[number, number, number], [number, number, number], [number, number, number], [number, number, number]][];
    positions?: [number, number, number][];
    /**
     * Vertex UVs. Can be either indexed via the `polys` section, or be a quad-list if mapped 1-to-1 to the positions and normals sections.
     */
    uvs?: [number, number][];
  };
  render_group_id?: number;
  rotation?: Rotation1;
  texture_meshes?: TextureMeshes;
}[];
/**
 * UNDOCUMENTED.
 */
export type Cape = string;

/**
 * The minecraft resourcepack model schema for 1.16.0
 */
export interface Geometry1160 {
  debug?: Debug;
  format_version: FormatVersion;
  "minecraft:geometry": Geometry;
}
/**
 * Model specification.
 */
export interface Model {
  description: Description;
  bones?: Bones;
  cape?: Cape;
}
/**
 * The descriptions of the geometry.
 */
export interface Description {
  identifier: Identifier;
  texture_width?: TextureWidth;
  texture_height?: TextureHeight;
  visible_bounds_offset?: VisibleBoundsOffset;
  visible_bounds_width?: VisibleBoundsWidth;
  visible_bounds_height?: VisibleBoundsHeight;
}
/**
 * Specifies the UV's for the face that stretches along the x and y axes, and faces the -z axis.
 */
export interface North {
  uv?: Uv1;
  uv_size?: UvSize;
  material_instance?: MaterialInstance;
}
/**
 * Specifies the UV's for the face that stretches along the x and y axes, and faces the z axis.
 */
export interface South {
  uv?: Uv1;
  uv_size?: UvSize;
  material_instance?: MaterialInstance;
}
/**
 * Specifies the UV's for the face that stretches along the z and y axes, and faces the x axis.
 */
export interface East {
  uv?: Uv1;
  uv_size?: UvSize;
  material_instance?: MaterialInstance;
}
/**
 * Specifies the UV's for the face that stretches along the z and y axes, and faces the -x axis.
 */
export interface West {
  uv?: Uv1;
  uv_size?: UvSize;
  material_instance?: MaterialInstance;
}
/**
 * Specifies the UV's for the face that stretches along the x and z axes, and faces the y axis.
 */
export interface Up {
  uv?: Uv1;
  uv_size?: UvSize;
  material_instance?: MaterialInstance;
}
/**
 * Specifies the UV's for the face that stretches along the x and z axes, and faces the -y axis.
 */
export interface Down {
  uv?: Uv1;
  uv_size?: UvSize;
  material_instance?: MaterialInstance;
}
