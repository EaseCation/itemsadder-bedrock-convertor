/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * A version that tells minecraft what type of data format can be expected when reading this file.
 */
export type FormatVersion = string;
/**
 * UNDOCUMENTED.
 */
export type RecipeIdentifier = string;
export type Tag = string;
/**
 * Recipe tags 1.12.0
 */
export type Tags = Tag[];
/**
 * Items used as input for the furnace recipe.
 */
export type Input = string;
/**
 * Items used as output for the furnace recipe.
 */
export type Output = string;
/**
 * Input potion used on the brewing stand.
 */
export type Input1 = string;
/**
 * Output potion from mixing the input potion with the reagent on the brewing stand.
 */
export type Output1 = string;
/**
 * Item used to mix with the input potion.
 */
export type Reagent = string;
/**
 * Input potion used on the brewing stand.
 */
export type Input2 = string;
/**
 * Output potion from mixing the input potion with the reagent on the brewing stand.
 */
export type Output2 = string;
/**
 * Item used to mix with the input potion.
 */
export type Reagent1 = string;
/**
 * Recipe item 1.12.0
 */
export type Item =
  | ItemIdentifier
  | {
      item: ItemIdentifier1;
      data?: ItemDataValue;
      count?: Count;
    };
export type ItemIdentifier = string;
export type ItemIdentifier1 = string;
export type ItemDataValue = number;
export type Count = number;
/**
 * UNDOCUMENTED.
 */
export type Group = string;
/**
 * Characters that represent a pattern to be defined by keys.
 *
 * @minItems 1
 * @maxItems 3
 */
export type Pattern = [Pattern1] | [Pattern1, Pattern1] | [Pattern1, Pattern1, Pattern1];
export type Pattern1 = string;
/**
 * Item used as output for the furnace recipe.
 */
export type Priority = number;
/**
 * When input items match the pattern then these items are the result.
 */
export type Result = Item | Item[];
/**
 * Items used as input (without a shape) for the recipe.
 */
export type Ingredients = Item | Item[];
/**
 * UNDOCUMENTED.
 */
export type Group1 = string;
/**
 * Item used as output for the furnace recipe.
 */
export type Priority1 = number;
/**
 * When input items match the pattern then these items are the result.
 */
export type Result1 = Item | Item[];
/**
 * Item used as base for the smithing recipe.
 */
export type Base = Item | Item[];
/**
 * Item used as addition for the smithing recipe.
 */
export type Addition = Item | Item[];
/**
 * When input items match the pattern then these items are the result.
 */
export type Result2 = Item | Item[];

/**
 * Minecraft recipe 1.12.0
 */
export interface Recipe {
  format_version: FormatVersion;
  "minecraft:recipe_furnace"?: FurnaceRecipe1120;
  "minecraft:recipe_brewing_container"?: BrewingRecipe1120;
  "minecraft:recipe_brewing_mix"?: BrewingRecipe11201;
  "minecraft:recipe_shaped"?: ShapedRecipe1120;
  "minecraft:recipe_shapeless"?: ShapelessRecipe1120;
  "minecraft:recipe_smithing_transform"?: SmithingTransformRecipe1120;
}
/**
 * Represents a furnace recipe for a furnace.'Input` items will burn and transform into items specified in `output`..
 */
export interface FurnaceRecipe1120 {
  description: Definition;
  tags?: Tags;
  input?: Input;
  output?: Output;
}
/**
 * Recipe definition 1.12.0
 */
export interface Definition {
  identifier?: RecipeIdentifier;
}
/**
 * Represents a Potion Brewing Container Recipe..
 */
export interface BrewingRecipe1120 {
  description: Definition;
  tags?: Tags;
  input?: Input1;
  output?: Output1;
  reagent?: Reagent;
}
/**
 * Represents a Potion Brewing Container Recipe..
 */
export interface BrewingRecipe11201 {
  description: Definition;
  tags?: Tags;
  input?: Input2;
  output?: Output2;
  reagent?: Reagent1;
}
/**
 * Represents a shaped crafting recipe for a crafting table. The key used in the pattern may be any single character except the `space` character, which is reserved for empty slots in a recipe..
 */
export interface ShapedRecipe1120 {
  description: Definition;
  tags?: Tags;
  key?: Key;
  group?: Group;
  pattern?: Pattern;
  priority?: Priority;
  result?: Result;
}
/**
 * Patten key character mapped to item names.
 */
export interface Key {
  [k: string]: Item;
}
/**
 * Represents a shapeless crafting recipe..
 */
export interface ShapelessRecipe1120 {
  description: Definition;
  tags?: Tags;
  ingredients?: Ingredients;
  group?: Group1;
  priority?: Priority1;
  result?: Result1;
}
/**
 * Represents a smithing table crafting recipe..
 */
export interface SmithingTransformRecipe1120 {
  description: Definition;
  tags?: Tags;
  base?: Base;
  addition?: Addition;
  result?: Result2;
}
