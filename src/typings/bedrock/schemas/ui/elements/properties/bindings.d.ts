/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * The bindings that are contained within this element.
 */
export type Bindings = (ElementReference | ElementReference1 | VariableReference) | Bindings1[];
/**
 * A reference to an element: using the following syntax: [element_name]@[namespace_reference].[element_name_reference]
 */
export type ElementReference = string;
/**
 * A reference to an element: using the following syntax: [namespace_reference].[element_name_reference]
 */
export type ElementReference1 = string;
/**
 * A variable is a reference to a value that can be used in the UI.
 */
export type VariableReference = VariableReference1 & VariableReference2;
export type VariableReference1 = {
  [k: string]: unknown;
};
export type VariableReference2 = string;
/**
 * The name of the collection that the binding is in.
 */
export type BindingCollectionName = string | ((ElementReference | ElementReference1 | VariableReference3) & string);
export type VariableReference3 = VariableReference1 & VariableReference2;
/**
 * The prefix of the collection that the binding is in.
 */
export type BindingCollectionPrefix = string | ((ElementReference | ElementReference1 | VariableReference3) & string);
/**
 * The condition that must be met for the binding to be applied.
 */
export type BindingCondition =
  | ("once" | "always" | "always_when_visible" | "visible")
  | (ElementReference | ElementReference1 | VariableReference);
/**
 * The name of the binding. This is used to reference the binding in the element's properties.
 */
export type BindingName = string | ((ElementReference | ElementReference1 | VariableReference3) & string);
/**
 * The name of the binding. This is used to reference the binding in the element's properties.
 */
export type BindingNameOverride = string | ((ElementReference | ElementReference1 | VariableReference3) & string);
/**
 * The type of the binding.
 */
export type BindingType = ("collection" | "global" | "collection_details" | "none" | "view") | Variable;
/**
 * A variable is a reference to a value that can be used in the UI.
 */
export type Variable = Variable1 & Variable2;
export type Variable1 = string | string | string;
export type Variable2 = string;
/**
 * If true, the binding will be ignored.
 */
export type Ignored = boolean | ((ElementReference | ElementReference1 | VariableReference4) & string);
export type VariableReference4 = VariableReference1 & VariableReference2;
/**
 * If true, the binding will resolve sibling scope.
 */
export type ResolveSiblingScope = boolean | ((ElementReference | ElementReference1 | VariableReference4) & string);
/**
 * The name of the control that the binding is in.
 */
export type SourceControlName = string | ((ElementReference | ElementReference1 | VariableReference3) & string);
/**
 * The name of the property that the binding is in.
 */
export type SourcePropertyName = string | ((ElementReference | ElementReference1 | VariableReference3) & string);
/**
 * The name of the property that the binding is in.
 */
export type TargetPropertyName = string | ((ElementReference | ElementReference1 | VariableReference3) & string);

export interface Bindings1 {
  binding_collection_name?: BindingCollectionName;
  binding_collection_prefix?: BindingCollectionPrefix;
  binding_condition?: BindingCondition;
  binding_name?: BindingName;
  binding_name_override?: BindingNameOverride;
  binding_type?: BindingType;
  ignored?: Ignored;
  resolve_sibling_scope?: ResolveSiblingScope;
  source_control_name?: SourceControlName;
  source_property_name?: SourcePropertyName;
  target_property_name?: TargetPropertyName;
}
