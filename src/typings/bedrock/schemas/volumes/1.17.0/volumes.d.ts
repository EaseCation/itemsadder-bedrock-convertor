/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Specifies the version of the game this entity was made in. Minimum supported version is 1.17.0. Current supported version is 1.17.0.
 */
export type FormatVersion = "1.17.0";
/**
 * The unique identifier for this volume. It must be of the form `namespace:name', where namespace cannot be `minecraft`.
 */
export type Identifier = string;
/**
 * The name of the dimension the bounding box will exist in: one of `overworld', `nether` or `the end`.
 */
export type Dimension = "overworld" | "nether" | "the end";
/**
 * The maximum block position of the bounding box.
 */
export type Maximum = [] | [X] | [X, Y] | [X, Y, Z];
export type X = number;
export type Y = number;
export type Z = number;
/**
 * The minimum block position of the bounding box.
 */
export type Minimum = [] | [X1] | [X1, Y1] | [X1, Y1, Z1];
export type X1 = number;
export type Y1 = number;
export type Z1 = number;
/**
 * The identifier of a fog definition. Note that you will not receive any feedback if the definition does not exist.
 */
export type FogIdentifier = string;
/**
 * The priority for this fog definition setting. Smaller numbers have higher priority. Fogs with equal priority will be combined together.
 */
export type Priority = number;
/**
 * Molang expression to test against the actor. The given event will be triggered if the expression evaluates to true.
 */
export type Condition = string;
/**
 * Name of the event to run.
 */
export type Event = string;
/**
 * One of `self` or `other`. Self means the event is attached to the volume. Other means the event is attached to the actor.
 */
export type Target = "self" | "other";
/**
 * Required array that contains all the triggers.
 */
export type OnEnter = OnEnterTrigger[];
/**
 * Molang expression to test against the actor. The given event will be triggered if the expression evaluates to true.
 */
export type Condition1 = string;
/**
 * Name of the event to run.
 */
export type Event1 = string;
/**
 * One of `self` or `other`. Self means the event is attached to the volume. Other means the event is attached to the actor.
 */
export type Target1 = "self" | "other";
/**
 * Required array that contains all the triggers.
 */
export type OnEnter1 = OnEnterTrigger1[];

/**
 * UNDOCUMENTED.
 */
export interface SpawnRules1170 {
  format_version: FormatVersion;
  "minecraft:volume": SpawnRules;
}
/**
 * UNDOCUMENTED.
 */
export interface SpawnRules {
  description?: Description;
  components?: Components;
}
/**
 * The description contains a single `identifier` string.
 */
export interface Description {
  identifier?: Identifier;
}
/**
 * UNDOCUMENTED.
 */
export interface Components {
  "minecraft:bounds"?: Bounds;
  "minecraft:fog"?: Fog;
  "minecraft:on_actor_enter"?: OnActorEnter;
  "minecraft:on_actor_leave"?: OnActorLeave;
}
/**
 * Component that defines a minimum and maximum block position for a bounding box and which world dimension the bounding box is in. Every volume must have a bounds component.
 */
export interface Bounds {
  dimension?: Dimension;
  max?: Maximum;
  min?: Minimum;
}
/**
 * Displays the given fog whenever a player enters the volume. Each volume can only have one fog attached.
 */
export interface Fog {
  fog_identifier?: FogIdentifier;
  priority?: Priority;
}
/**
 * Component that defines what happens when an actor enters the volume. Can contain multiple json objects.
 */
export interface OnActorEnter {
  on_enter: OnEnter;
}
/**
 * Trigger.
 */
export interface OnEnterTrigger {
  condition?: Condition;
  event?: Event;
  target?: Target;
}
/**
 * Component that defines what happens when an actor leaves the volume.
 */
export interface OnActorLeave {
  on_enter: OnEnter1;
}
/**
 * Trigger.
 */
export interface OnEnterTrigger1 {
  condition?: Condition1;
  event?: Event1;
  target?: Target1;
}
